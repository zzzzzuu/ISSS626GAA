---
title: "In-Class Exercise 1"
author: "Leow Xian Zu"
date: "Aug 26 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true 
  message: false #no more warning message
  freeze: true #whatever document already commited does not render
---

# Set up

## Load the packages

```{r}
pacman::p_load(tidyverse, sf, tmap, ggstatsplot)
```

-   tidyverse: A collection of R packages for data manipulation, visualization, and analysis.
-   sf: Provides support for simple features, a standardized way to encode spatial vector data.
-   tmap: Creates thematic maps, offering a flexible, layer-based approach to map design.
-   ggstatsplot: Extends ggplot2 for creating graphics with statistical details included in the plots.

## Read the files

```{r}
mpsz14_shp <- st_read(dsn = "data/",
                layer = "MP14_SUBZONE_WEB_PL")
#mpsz14_kml <- st_read("C:/zzzzzuu/ISSS626GAA/In-class_Ex/In-class_Ex01/Dat
#There's error! Must be data source error.

```

Let's fix this error. We shall convert the shp sf data.frame into kml.

```{r}
st_write(mpsz14_shp, 
         "data/MP14_SUBZONE_WEB_PL.kml",
         delete_dsn = TRUE)
```

Great! Now that that's fixed, let's move on to preschool data. I downloaded the kml and geojson files.

```{r}
preschool_kml <- st_read("data/PreSchoolsLocation.kml")
preschool_geojson <- st_read("data/PreSchoolsLocation.geojson") 
```

Now, let's import the Master Plan 2019.

```{r}
mpsz19_shp <- st_read(dsn = "C:/zzzzzuu/ISSS626GAA/In-class_Ex/In-class_Ex01/Data/", 
                  layer = "MPSZ-2019")
mpsz19_kml <- st_read("C:/zzzzzuu/ISSS626GAA/In-class_Ex/In-class_Ex01/Data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml")

```

WGS 84 is popular because it captures location and is used by cell phones, in decimel degree. In geospatial analysis, we need to know distance difference. If we use WGS 84, 1 degree is different when you are at north pole or equator. So when we do geospatial analysis, we always use projected coordinate systems (PCS). For Singapore, we are using metre SVY 21. Now, let's convert it.

```{r}
st_crs(mpsz19_shp)
```

```{r}
mpsz19_shp <- st_read(dsn = "C:/zzzzzuu/ISSS626GAA/In-class_Ex/In-class_Ex01/Data/",
                layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
preschool <- st_read("C:/zzzzzuu/ISSS626GAA/In-class_Ex/In-class_Ex01/Data/PreSchoolsLocation.kml") %>%
  st_transform(crs = 3414)

```

Let's count the number of preschools.

```{r}
mpsz19_shp <- mpsz19_shp %>%
  mutate(`PreSch Count` = lengths(
    st_intersects(mpsz19_shp, preschool)))
```

```{r}
mpsz19_shp <- mpsz19_shp %>%
  mutate(Area = units::drop_units(
    st_area(.)),
    `PreSch Density` = `PreSch Count` / Area * 1000000
  )
```

EDA and CDA

```{r}
mpsz19_shp$`PreSch Density` <- as.numeric(as.character(mpsz19_shp$`PreSch Density`))
mpsz19_shp$`PreSch Count` <- as.numeric(as.character(mpsz19_shp$`PreSch Count`)) 
mpsz19_shp <- as.data.frame(mpsz19_shp)

ggscatterstats(data = mpsz19_shp,
               x = `PreSch Density`,
               y = `PreSch Count`,
               type = "parametric")
```

Read population data from Singstat.

```{r}
popdata <- read_csv("C:/zzzzzuu/ISSS626GAA/In-class_Ex/In-class_Ex01/Data/respopagesextod2023.csv")
popdata2023 <- popdata %>% 
  group_by(PA, SZ, AG) %>% 
  summarise(`POP`=sum(`Pop`)) %>%  
  ungroup() %>% 
  pivot_wider(names_from=AG,
              values_from = POP)

colnames(popdata2023)
```

```{r}
popdata2023 <- popdata2023 %>%
  mutate(YOUNG=rowSums(.[3:6]) # Aged 0 - 24, 10 - 24
         +rowSums(.[14])) %>% # Aged 5 - 9
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+ # Aged 25 - 59
  rowSums(.[15])) %>%  # Aged 60 -64
  mutate(`AGED`=rowSums(.[16:21])) %>%
  mutate(`TOTAL`=rowSums(.[3:21])) %>%
  mutate(`DEPENDENCY`=(`YOUNG` + `AGED`)
  / `ECONOMY ACTIVE`) %>% 
  select(`PA`, `SZ`, `YOUNG`, 
         `ECONOMY ACTIVE`, `AGED`,
         `TOTAL`, `DEPENDENCY`)
```

Join popdata2023 and mpsz19_shp

```{r}
popdata2023 <- popdata2023 %>%
  mutate_at(.vars = vars(PA, SZ), 
          .funs = list(toupper)) 
mpsz_pop2023 <- left_join(mpsz19_shp, popdata2023,
                          by = c("SUBZONE_N" = "SZ"))
pop2023_mpsz <- left_join(popdata2023, mpsz19_shp, 
                          by = c("SZ" = "SUBZONE_N"))
```

```{r}

tmap_mode("plot")
mpsz_pop2023 <- st_as_sf(mpsz_pop2023)
class(mpsz_pop2023)
qtm(mpsz_pop2023, 
    fill = "DEPENDENCY")
tm_shape(mpsz_pop2023)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

```{r}
mpsz_pop2023 <- mpsz_pop2023 %>%
  drop_na()
get.var <- function(vname,df) {
  v <- df[vname] %>% 
    st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
percentmap <- function(vnam, df, legtitle=NA, mtitle="Percentile Map"){
  percent <- c(0,.01,.1,.5,.9,.99,1)
  var <- get.var(vnam, df)
  bperc <- quantile(var, percent)
  tm_shape(mpsz_pop2023) +
  tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,
             title=legtitle,
             breaks=bperc,
             palette="Blues",
          labels=c("< 1%", "1% - 10%", "10% - 50%", "50% - 90%", "90% - 99%", "> 99%"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("right","bottom"))
}
percentmap("DEPENDENCY", mpsz_pop2023)
```

```{r}
ggplot(data = mpsz_pop2023,
       aes(x = "",
           y = DEPENDENCY)) +
  geom_boxplot()
```

```{r}
boxbreaks <- function(v,mult=1.5) {
  qv <- unname(quantile(v))
  iqr <- qv[4] - qv[2]
  upfence <- qv[4] + mult * iqr
  lofence <- qv[2] - mult * iqr
  # initialize break points vector
  bb <- vector(mode="numeric",length=7)
  # logic for lower and upper fences
  if (lofence < qv[1]) {  # no lower outliers
    bb[1] <- lofence
    bb[2] <- floor(qv[1])
  } else {
    bb[2] <- lofence
    bb[1] <- qv[1]
  }
  if (upfence > qv[5]) { # no upper outliers
    bb[7] <- upfence
    bb[6] <- ceiling(qv[5])
  } else {
    bb[6] <- upfence
    bb[7] <- qv[5]
  }
  bb[3:5] <- qv[2:4]
  return(bb)
}
get.var <- function(vname,df) {
  v <- df[vname] %>% st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
boxmap <- function(vnam, df, 
                   legtitle=NA,
                   mtitle="Box Map",
                   mult=1.5){
  var <- get.var(vnam,df)
  bb <- boxbreaks(var)
  tm_shape(df) +
    tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,title=legtitle,
             breaks=bb,
             palette="Blues",
          labels = c("lower outlier", 
                     "< 25%", 
                     "25% - 50%", 
                     "50% - 75%",
                     "> 75%", 
                     "upper outlier"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("left",
                               "top"))
}
boxmap("DEPENDENCY", mpsz_pop2023)
```

```{r}
tmap_options(check.and.fix = TRUE)
tmap_mode("view")
boxmap("DEPENDENCY", mpsz_pop2023)
```

```{r}
tmap_mode("plot")
```

That ends in-class ex01.
