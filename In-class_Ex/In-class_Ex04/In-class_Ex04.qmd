---
title: "In-class Exercise 4"
author: "Leow Xian Zu"
date: "16 Sep 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true 
  message: false #no more warning message
  freeze: true #whatever document already commited does not render
---

# Geographically weighted summary statistics, gwModel methods

bw.gwr is the method to recommend the bandwidth to cut off, or if using adaptive distance, the optimal number of neighbours to get statistifically signifant insights as much as possible.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel, ggstatsplot, viridis)


hunan_sf <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv") #read_csv is better
hunan_sf <- left_join(hunan_sf, hunan2012) %>%
  dplyr::select(1:3, 7, 15, 16, 17, 31, 32)
```

In order to use GWModel, we need to convert from sf to sp.
Use the following chunk.

```{r}
hunan_sp <- hunan_sf %>%
  as_Spatial()
```

```{r}
bw_CV <- bw.gwr(GDPPC ~ 1,
                data = hunan_sp,
                approach = "CV",
                adaptive = TRUE,
                kernel = "bisquare",
                longlat = T)
```

```{r}
bw_AIC <- bw.gwr(GDPPC ~ 1,
                data = hunan_sp,
                approach = "AIC",
                adaptive = TRUE, #if this is false, then it's fixed bandwidth
                kernel = "bisquare",
                longlat = T) #longlat indicates that it is in decimel degree. documentation says if it's set to TRUE, it applies "great circle distance calculation" Only thing to take note here, is because it is global, it is in kilometres (converted to kilometres). Later when we see the results of a fixed kernel, they are in km.
```

Starts with all (88), after that, it chips away the neighbours, to 22. And that's the optimal number of neighbours. Based on GDP per capita, the optimal neighbour is 22.

If we use fix?
```{r}
bw_CV_fixed <- bw.gwr(GDPPC ~ 1,
                data = hunan_sp,
                approach = "CV",
                adaptive = FALSE,
                kernel = "bisquare",
                longlat = T)
```
This determines fixed distance, and shows which one is best for the search. This is in KM.

Let's take a look at AIC.

```{r}
bw_AIC_fixed <- bw.gwr(GDPPC ~ 1,
                data = hunan_sp,
                approach = "AIC",
                adaptive = FALSE,
                kernel = "bisquare",
                longlat = T)
```

Distance is larger. Some geographical spaces are larger, resulting in discrepancy.

```{r}
gwstat <- gwss(data = hunan_sp,
               vars = "GDPPC",
               bw = bw_AIC,
               kernel = "bisquare",
               adaptive = TRUE,
               longlat = T)
```

```{r}
class(gwstat)
```

gwstat is a gwss object class. Special to GWmodel.
we are interested in gwstst$SDF and "gwstat[["SDF"]]@data"

GDPPC_LM is the local mean. LVar is the variance wrt the 22 neighbours, LCV is local correlation variance. LSKe is error. LSD is local standard deviation.

In order to use it, we have to use two steps. pull the list out and convert into dataframe. And now append it.

```{r}
gwstat_df <- as.data.frame(gwstat$SDF)
hunan_gstat <- cbind(hunan_sf, gwstat_df) #cbind is to append row by row. Sequence matters.
```


```{r}
tm_shape(hunan_gstat) +
  tm_polygons(col = "GDPPC_LM", 
              style = "quantile",
              title = "GDP per capita (local mean)",
              palette = "YlOrRd") +
  tm_layout(main.title = "Hunan Province GDP per capita",
            main.title.size = 1.2,
            legend.outside = TRUE,
            legend.outside.position = "right")
```

# Correlation coeficient.

Is there any relationship between GDP per capita and gross industry output?

```{r}

bw_AIC_cor <- bw.gwr(GDPPC ~ GIO,
                data = hunan_sp,
                approach = "AIC",
                adaptive = TRUE, #if this is false, then it's fixed bandwidth
                kernel = "bisquare",
                longlat = T)

gwstat_cor <- gwss(data = hunan_sp,
               vars = c("GDPPC","GIO"),
               bw = bw_AIC_cor,
               kernel = "bisquare",
               adaptive = TRUE,
               longlat = T) 


gwstat_cor_df <- as.data.frame(gwstat_cor$SDF) %>%
  select(12,13)
hunan_gstat_cor <- cbind(hunan_sf, gwstat_cor_df) #cbind is to append row by row. Sequence matters.


#tm_shape(hunan_gstat_cor) +
#  tm_polygons(col = "Spearman_rho_GDPCC.GIO", 
#              style = "quantile",
#              title = "Spearman Coefficient between GDPCC and GIO",
#              palette = "YlOrRd") +
#  tm_layout(main.title = "Coefficient Coefficient between GDPCC and GIO",
#            main.title.size = 1.2,
#            legend.outside = TRUE,
#            legend.outside.position = "right")

```