{
  "hash": "7bb9fe2f242a14b926ddb0ad1ab03007",
  "result": {
    "markdown": "---\ntitle: \"In-class Exercise 4\"\nauthor: \"Leow Xian Zu\"\ndate: \"16 Sep 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true \n  message: false #no more warning message\n  freeze: true #whatever document already commited does not render\n---\n\n\n# Geographically weighted summary statistics, gwModel methods\n\nbw.gwr is the method to recommend the bandwidth to cut off, or if using adaptive distance, the optimal number of neighbours to get statistifically signifant insights as much as possible.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel, ggstatsplot, viridis)\n\n\nhunan_sf <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `Hunan' from data source \n  `C:\\zzzzzuu\\ISSS626GAA\\In-class_Ex\\In-class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\") #read_csv is better\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nhunan_sf <- left_join(hunan_sf, hunan2012) %>%\n  dplyr::select(1:3, 7, 15, 16, 17, 31, 32)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(County)`\n```\n:::\n:::\n\n\nIn order to use GWModel, we need to convert from sf to sp.\nUse the following chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sp <- hunan_sf %>%\n  as_Spatial()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\",\n                adaptive = TRUE,\n                kernel = \"bisquare\",\n                longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = TRUE, #if this is false, then it's fixed bandwidth\n                kernel = \"bisquare\",\n                longlat = T) #longlat indicates that it is in decimel degree. documentation says if it's set to TRUE, it applies \"great circle distance calculation\" Only thing to take note here, is because it is global, it is in kilometres (converted to kilometres). Later when we see the results of a fixed kernel, they are in km.\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n```\n:::\n:::\n\n\nStarts with all (88), after that, it chips away the neighbours, to 22. And that's the optimal number of neighbours. Based on GDP per capita, the optimal neighbour is 22.\n\nIf we use fix?\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV_fixed <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"CV\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n```\n:::\n:::\n\nThis determines fixed distance, and shows which one is best for the search. This is in KM.\n\nLet's take a look at AIC.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC_fixed <- bw.gwr(GDPPC ~ 1,\n                data = hunan_sp,\n                approach = \"AIC\",\n                adaptive = FALSE,\n                kernel = \"bisquare\",\n                longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n```\n:::\n:::\n\n\nDistance is larger. Some geographical spaces are larger, resulting in discrepancy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat <- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = T)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(gwstat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"gwss\"\n```\n:::\n:::\n\n\ngwstat is a gwss object class. Special to GWmodel.\nwe are interested in gwstst$SDF and \"gwstat[[\"SDF\"]]@data\"\n\nGDPPC_LM is the local mean. LVar is the variance wrt the 22 neighbours, LCV is local correlation variance. LSKe is error. LSD is local standard deviation.\n\nIn order to use it, we have to use two steps. pull the list out and convert into dataframe. And now append it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df <- as.data.frame(gwstat$SDF)\nhunan_gstat <- cbind(hunan_sf, gwstat_df) #cbind is to append row by row. Sequence matters.\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_gstat) +\n  tm_polygons(col = \"GDPPC_LM\", \n              style = \"quantile\",\n              title = \"GDP per capita (with smoothing)\",\n              palette = \"YlOrRd\") +\n  tm_layout(main.title = \"Hunan Province GDP per capita\",\n            main.title.size = 1.2,\n            legend.outside = TRUE,\n            legend.outside.position = \"right\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::",
    "supporting": [
      "In-class_Ex04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}