{
  "hash": "e43ad388b84b764bf2067f0cffb43990",
  "result": {
    "markdown": "---\ntitle: \"Take-home Exercise 1\"\nauthor: \"Leow Xian Zu\"\ndate: \"2 Sep 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true \n  message: false #no more warning message\n  freeze: true #whatever document already commited does not render\n---\n\n\n# Set up\n\n## Load packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\n  readr,       # for importing data\n  tidyverse,    # for data manipulation and visualization\n  sf,           # for spatial data handling\n  tmap,         # for thematic maps\n  lubridate,    # for date/time manipulation\n  spatstat,     # for point pattern analysis\n  ggstatsplot,  # for statistical data viz\n  maptools,     # for spatial object manipulation\n  raster,       # for raster data handling\n  sp,           # for spatial data classes and methods\n  leaflet,      # for interactive maps\n  ggplot2,      # for advanced plotting\n  spNetwork     # for spatial network analysis\n)\nset.seed(1234)\n```\n:::\n\n\n## Load files\n\nIn this section, we will load and prepare the datasets necessary for our analysis of road traffic accidents in the Bangkok Metropolitan Region (BMR). The BMR, also known as Greater Bangkok, encompasses the city of Bangkok and its surrounding provinces. According to Wikipedia, this area includes Bangkok itself and five adjacent provinces: Nakhon Pathom, Pathum Thani, Nonthaburi, Samut Prakan, and Samut Sakhon. Our analysis will focus on this region, which serves as the political, economic, and cultural heart of Thailand.\n\nWe'll be working with three primary datasets: Thailand Road Accident data from 2019-2022, road network data from OpenStreetMap, and administrative boundary data. These datasets will allow us to conduct a comprehensive spatio-temporal analysis of road traffic accidents in this densely populated and economically significant area of Thailand.\n\n## Data Wrangling 1: Correct Coordinate Reference System\n\nIn preparing our analysis of road traffic accidents in the Bangkok Metropolitan Region, care is taken to ensure our data is accurate and spatially consistent. First, we import the road accident data from 2019 to 2022 using `read_csv()`, a function chosen for its robust handling of various CSV formats (includes automatic reading of headers and correct tagging of date and time columns). Crucially, we filter out records with missing or empty longitude and latitude values. This step is vital as geographic coordinates are the cornerstone of our spatial analysis; including records without valid locations would skew our results and potentially lead to misleading conclusions about accident patterns.\n\nWe then transform this data into a spatial format using `st_as_sf()`. This conversion is essential as it allows us to perform spatial operations and visualisations. We specify the coordinate reference system (CRS) as EPSG:32647, which is tailored for Thailand. This was double-checked on https://epsg.io/. This choice is deliberate - using a local CRS ensures more accurate distance calculations and area representations compared to a global system like WGS84. For the road network data, sourced from OpenStreetMap, we employ `st_read()` to load the shapefile. Recognizing that OSM data can sometimes contain geometry inconsistencies, we apply `st_make_valid()`. This crucial step corrects any invalid geometries that could potentially crash our analysis or produce erroneous results in spatial operations. Lastly, we import administrative boundary data, again ensuring it aligns with our chosen CRS.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf <- read_csv(\"C:/zzzzzuu/ISSS626GAA/Take-home_Ex/Take-home_Ex01/data/thai_road_accident_2019_2022.csv\") %>%\n  filter(!is.na(longitude) & longitude != \"\",\n         !is.na(latitude) & latitude != \"\") %>%\n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"),\n    crs=4326) %>%  #WGS84, decimel degree\n  st_transform(crs = 32647)  #32647 is Thai's\n#read_csv from Readr is better than read.csv base R. It matters for headers with spacing, and also can autodetect dates. \n\nroads_sf <- st_read(\"C:/zzzzzuu/ISSS626GAA/Take-home_Ex/Take-home_Ex01/data/hotosm_tha_roads_lines_shp.shp\") %>%\n  st_make_valid() %>%\n  st_set_crs(4326) %>%\n  st_transform(crs = 32647)\n\nadmin_sf <- st_read(dsn = \"C:/zzzzzuu/ISSS626GAA/Take-Home_Ex/Take-Home_Ex01/data\", layer = \"tha_admbnda_adm1_rtsd_20220121\") %>%\n  st_set_crs(4326) %>%\n  st_transform(crs = 32647)\n```\n:::\n\n\nNeed to check unit of measurement!!!! See how to convert.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(admin_sf)\nclass(rdacc_sf)\nclass(roads_sf)\n```\n:::\n\n\n## Check date and time format (POSIXct)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(rdacc_sf$incident_datetime)\nclass(rdacc_sf$report_datetime)\n```\n:::\n\n\nThe incident_datetime and report_datetime fields are stored in POSIXct format, a structure that captures year, month, date, and time information. This format allows for easy extraction of specific temporal components such as month, day of the year, or year via lubridate package. The level of detail and flexibility in datetime handling is only available when the data is properly imported and parsed using readr.\n\n## Data Wrangling 2: Filtering to a smaller subset of data\n\nThe initial datasets cover all of Thailand and include various road types. To focus on the Bangkok Metropolitan Region (BMR), a spatial filter is applied to extract data for Bangkok and its five adjacent provinces: Nakhon Pathom, Pathum Thani, Nonthaburi, Samut Prakan, and Samut Sakhon. This step reduces data volume and ensures geographic relevance. Additionally, the road network data is filtered to include only roads accessible to motor vehicles, excluding roads like pedestrian paths and cycling lanes. These filtering processes enhance the accuracy of the subsequent analysis by focusing on relevant geographic areas and road types where motor vehicle accidents are likely to occur.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbangkok_areas <- c(\"Bangkok\",\n                   \"Nonthaburi\",\n                   \"Samut Prakan\",\n                   \"Pathum Thani\",\n                   \"Samut Sakhon\",\n                   \"Nakhon Pathom\")\n\nadmin_sf_bkk <- admin_sf %>%\n  filter(!is.na(ADM1_EN) & ADM1_EN %in% bangkok_areas)\nunique(admin_sf_bkk$ADM1_EN)     #check\nplot(st_geometry(admin_sf_bkk))  #check\nst_geometry_type(admin_sf_bkk)   #check\n\nrdacc_sf_bkk <- rdacc_sf %>%\n  filter(!is.na(province_en) & province_en %in% bangkok_areas)\nunique(rdacc_sf_bkk$province_en) #check\nplot(st_geometry(rdacc_sf_bkk))  #check\n\nroads_sf_bkk <- st_intersection(roads_sf, admin_sf_bkk)\nunique(roads_sf_bkk$highway)     #check\nroads_sf_bkk_veh <- roads_sf_bkk %>%\n  filter(!is.na(highway) & \n           !(highway %in% c(\"pedestrian\",\n                            \"bridleway\",\n                            \"cycleway\",\n                            \"footway\",\n                            \"steps\",\n                            \"path\")))\nplot(st_geometry(roads_sf_bkk_veh)) #check\n```\n:::\n\n\n::: callout-tip\n## Thailand Highway Classification\n\nRefer to https://wiki.openstreetmap.org/wiki/WikiProject_Thailand#Highway_classification for definitions of different roads and access that is legally allowed.\n:::\n\n## Converting MULTILINESTRINGs to LINESTRINGs\n\nThe road network data contains both linestrings and multilinestrings. Multilinestrings represent complex road segments with multiple connected lines, while linestrings are single, continuous lines. Converting all geometries to linestrings simplifies the data structure, ensuring uniformity across the dataset, and makes it easier for lixelisation. This conversion is necessary for consistent analysis, as many spatial operations work more efficiently with simple linestring geometries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeometry_types <- roads_sf_bkk_veh %>%\n  st_geometry_type() %>%\n  as.character() %>%\n  unique()\n\nif(length(geometry_types) == 1 && geometry_types == \"LINESTRING\") {\n  print(\"All geometries are LINESTRING\")\n} else {\n  print(\"Not all geometries are LINESTRING. Types found:\")\n  print(geometry_types)\n}\n\n\nroads_sf_bkk_veh_ls <- roads_sf_bkk_veh %>%\n  st_cast(\"MULTILINESTRING\", group_or_split = TRUE) %>%  \n  st_cast(\"LINESTRING\")\n\n\ngeometry_types <- roads_sf_bkk_veh_ls %>%\n  st_geometry_type() %>%\n  as.character() %>%\n  unique()\n\nif(length(geometry_types) == 1 && geometry_types == \"LINESTRING\") {\n  print(\"All geometries are LINESTRING\")\n} else {\n  print(\"Not all geometries are LINESTRING. Types found:\")\n  print(geometry_types)\n}\n```\n:::\n\n\n## Write a smaller subset of the data for easier compute times\n\nThis segment makes our data smaller and easier to work with. It is savedin a special format (RDS) in a 'sandbox' folder. This helps my computer run faster and keeps the project tidy. I used commands to save and load data, and tell some parts of our code not to run again if not needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(roads_sf_bkk_veh_ls, \"data/sandbox/roads.rds\")\nwrite_rds(rdacc_sf_bkk, \"data/sandbox/rdacc.rds\")\nwrite_rds(admin_sf_bkk, \"data/sandbox/admin.rds\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}