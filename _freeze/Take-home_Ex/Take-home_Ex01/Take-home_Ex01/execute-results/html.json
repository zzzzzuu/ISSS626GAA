{
  "hash": "a08eb2a2ec2539e6f6e0259b665484aa",
  "result": {
    "markdown": "---\ntitle: \"Take-home Exercise 1\"\nauthor: \"Leow Xian Zu\"\ndate: \"2 Sep 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true \n  message: false #no more warning message\n  freeze: true #whatever document already commited does not render\n---\n\n\n# Set up\n\n## Load packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(\n  readr,       # for importing data\n  tidyverse,    # for data manipulation and visualization\n  sf,           # for spatial data handling\n  tmap,         # for thematic maps\n  lubridate,    # for date/time manipulation\n  spatstat,     # for point pattern analysis\n  ggstatsplot,  # for statistical data viz\n  maptools,     # for spatial object manipulation\n  raster,       # for raster data handling\n  sp,           # for spatial data classes and methods\n  leaflet,      # for interactive maps\n  ggplot2,      # for advanced plotting\n  spNetwork,    # for spatial network analysis\n  sparr,        # for spatio-temporal analysis\n  KernSmooth    # for kernel smoothing\n)\nset.seed(1234)\n```\n:::\n\n\n## Load files\n\nIn this section, we will load and prepare the datasets necessary for our analysis of road traffic accidents in the Bangkok Metropolitan Region (BMR). The BMR, also known as Greater Bangkok, encompasses the city of Bangkok and its surrounding provinces. According to Wikipedia, this area includes Bangkok itself and five adjacent provinces: Nakhon Pathom, Pathum Thani, Nonthaburi, Samut Prakan, and Samut Sakhon. Our analysis will focus on this region, which serves as the political, economic, and cultural heart of Thailand.\n\nWe'll be working with three primary datasets: Thailand Road Accident data from 2019-2022, road network data from OpenStreetMap, and administrative boundary data. These datasets will allow us to conduct a comprehensive spatio-temporal analysis of road traffic accidents in this densely populated and economically significant area of Thailand.\n\n## Data Wrangling 1: Correct Coordinate Reference System\n\nIn preparing our analysis of road traffic accidents in the Bangkok Metropolitan Region, care is taken to ensure our data is accurate and spatially consistent. First, we import the road accident data from 2019 to 2022 using `read_csv()`, a function chosen for its robust handling of various CSV formats (includes automatic reading of headers and correct tagging of date and time columns). Crucially, we filter out records with missing or empty longitude and latitude values. This step is vital as geographic coordinates are the cornerstone of our spatial analysis; including records without valid locations would skew our results and potentially lead to misleading conclusions about accident patterns.\n\nWe then transform this data into a spatial format using `st_as_sf()`. This conversion is essential as it allows us to perform spatial operations and visualisations. We specify the coordinate reference system (CRS) as EPSG:32647, which is tailored for Thailand. This was double-checked on https://epsg.io/. This choice is deliberate - using a local CRS ensures more accurate distance calculations and area representations compared to a global system like WGS84. For the road network data, sourced from OpenStreetMap, we employ `st_read()` to load the shapefile. Recognizing that OSM data can sometimes contain geometry inconsistencies, we apply `st_make_valid()`. This crucial step corrects any invalid geometries that could potentially crash our analysis or produce erroneous results in spatial operations. Lastly, we import administrative boundary data, again ensuring it aligns with our chosen CRS.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf <- read_csv(\"C:/zzzzzuu/ISSS626GAA/Take-home_Ex/Take-home_Ex01/data/thai_road_accident_2019_2022.csv\") %>%\n  filter(!is.na(longitude) & longitude != \"\",\n         !is.na(latitude) & latitude != \"\") %>%\n  st_as_sf(coords = c(\n    \"longitude\", \"latitude\"),\n    crs=4326) %>%  #WGS84, decimel degree\n  st_transform(crs = 32647)  #32647 is Thai's\n#read_csv from Readr is better than read.csv base R. It matters for headers with spacing, and also can autodetect dates. \n\nroads_sf <- st_read(\"C:/zzzzzuu/ISSS626GAA/Take-home_Ex/Take-home_Ex01/data/hotosm_tha_roads_lines_shp.shp\") %>%\n  st_make_valid() %>%\n  st_set_crs(4326) %>%\n  st_transform(crs = 32647)\n\nadmin_sf <- st_read(dsn = \"C:/zzzzzuu/ISSS626GAA/Take-Home_Ex/Take-Home_Ex01/data\", layer = \"tha_admbnda_adm1_rtsd_20220121\") %>%\n  st_set_crs(4326) %>%\n  st_transform(crs = 32647)\n```\n:::\n\n\nNeed to check unit of measurement!!!! See how to convert.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(admin_sf)\nclass(rdacc_sf)\nclass(roads_sf)\n```\n:::\n\n\n## Check date and time format (POSIXct)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(rdacc_sf$incident_datetime)\nclass(rdacc_sf$report_datetime)\n```\n:::\n\n\nThe incident_datetime and report_datetime fields are stored in POSIXct format, a structure that captures year, month, date, and time information. This format allows for easy extraction of specific temporal components such as month, day of the year, or year via lubridate package. The level of detail and flexibility in datetime handling is only available when the data is properly imported and parsed using readr.\n\n## Data Wrangling 2: Filtering to a smaller subset of data\n\nThe initial datasets cover all of Thailand and include various road types. To focus on the Bangkok Metropolitan Region (BMR), a spatial filter is applied to extract data for Bangkok and its five adjacent provinces: Nakhon Pathom, Pathum Thani, Nonthaburi, Samut Prakan, and Samut Sakhon. This step reduces data volume and ensures geographic relevance. Additionally, the road network data is filtered to include only roads accessible to motor vehicles, excluding roads like pedestrian paths and cycling lanes. These filtering processes enhance the accuracy of the subsequent analysis by focusing on relevant geographic areas and road types where motor vehicle accidents are likely to occur.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbangkok_areas <- c(\"Bangkok\",\n                   \"Nonthaburi\",\n                   \"Samut Prakan\",\n                   \"Pathum Thani\",\n                   \"Samut Sakhon\",\n                   \"Nakhon Pathom\")\n\nadmin_sf_bkk <- admin_sf %>%\n  filter(!is.na(ADM1_EN) & ADM1_EN %in% bangkok_areas)\nunique(admin_sf_bkk$ADM1_EN)     #check\nplot(st_geometry(admin_sf_bkk))  #check\nst_geometry_type(admin_sf_bkk)   #check\n\nrdacc_sf_bkk <- rdacc_sf %>%\n  filter(!is.na(province_en) & province_en %in% bangkok_areas)\nunique(rdacc_sf_bkk$province_en) #check\nplot(st_geometry(rdacc_sf_bkk))  #check\n\nroads_sf_bkk <- st_intersection(roads_sf, admin_sf_bkk)\nunique(roads_sf_bkk$highway)     #check\nroads_sf_bkk_veh <- roads_sf_bkk %>%\n  filter(!is.na(highway) & \n           !(highway %in% c(\"pedestrian\",\n                            \"bridleway\",\n                            \"cycleway\",\n                            \"footway\",\n                            \"steps\",\n                            \"path\")))\nplot(st_geometry(roads_sf_bkk_veh)) #check\n```\n:::\n\n\n::: callout-tip\n## Thailand Highway Classification\n\nRefer to https://wiki.openstreetmap.org/wiki/WikiProject_Thailand#Highway_classification for definitions of different roads and access that is legally allowed.\n:::\n\n## Converting MULTILINESTRINGs to LINESTRINGs\n\nThe road network data contains both linestrings and multilinestrings. Multilinestrings represent complex road segments with multiple connected lines, while linestrings are single, continuous lines. Converting all geometries to linestrings simplifies the data structure, ensuring uniformity across the dataset, and makes it easier for lixelisation. This conversion is necessary for consistent analysis, as many spatial operations work more efficiently with simple linestring geometries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeometry_types <- roads_sf_bkk_veh %>%\n  st_geometry_type() %>%\n  as.character() %>%\n  unique()\n\nif(length(geometry_types) == 1 && geometry_types == \"LINESTRING\") {\n  print(\"All geometries are LINESTRING\")\n} else {\n  print(\"Not all geometries are LINESTRING. Types found:\")\n  print(geometry_types)\n}\n\n\nroads_sf_bkk_veh_ls <- roads_sf_bkk_veh %>%\n  st_cast(\"MULTILINESTRING\", group_or_split = TRUE) %>%  \n  st_cast(\"LINESTRING\")\n\n\ngeometry_types <- roads_sf_bkk_veh_ls %>%\n  st_geometry_type() %>%\n  as.character() %>%\n  unique()\n\nif(length(geometry_types) == 1 && geometry_types == \"LINESTRING\") {\n  print(\"All geometries are LINESTRING\")\n} else {\n  print(\"Not all geometries are LINESTRING. Types found:\")\n  print(geometry_types)\n}\n```\n:::\n\n\n## Write a smaller subset of the data for easier compute times\n\nThis segment makes our data smaller and easier to work with. It is savedin a special format (RDS) in a 'sandbox' folder. This helps my computer run faster and keeps the project tidy. I used commands to save and load data, and tell some parts of our code not to run again if not needed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(roads_sf_bkk_veh_ls, \"data/sandbox/roads.rds\")\nwrite_rds(rdacc_sf_bkk, \"data/sandbox/rdacc.rds\")\nwrite_rds(admin_sf_bkk, \"data/sandbox/admin.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nroads <- read_rds(\"data/sandbox/roads.rds\")\nrdacc <- read_rds(\"data/sandbox/rdacc.rds\")\nadmin <- read_rds(\"data/sandbox/admin.rds\")\n```\n:::\n\n\n# Overall Analysis\n\nRoads dataset is still too dense. It is difficult to make meaningful insights out of it, so we will drop more, smaller roads.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(roads$highway)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"secondary\"      \"residential\"    \"secondary_link\" \"service\"       \n [5] \"track\"          \"tertiary\"       \"primary\"        \"primary_link\"  \n [9] \"unclassified\"   \"trunk_link\"     \"motorway_link\"  \"motorway\"      \n[13] \"construction\"   \"trunk\"          \"corridor\"       \"tertiary_link\" \n[17] \"raceway\"        \"busway\"         \"road\"           \"proposed\"      \n```\n:::\n\n```{.r .cell-code}\nroads_filtered <- roads %>%\n  filter(!is.na(highway) & \n           (highway %in% c(\"secondary\",\n                           \"secondary_link\",\n                           \"primary\",\n                           \"primary_link\",\n                           \"trunk_link\",\n                           \"trunk\",\n                           \"motorway\",\n                           \"motorway_link\",\n                           \"tertiary_link\",\n                           \"tertiary\")))\nplot(st_geometry(roads_filtered))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(rdacc) +\n  tm_dots(col = \"red\", size = 0.1) +\n  tm_shape(roads_filtered) +\n  tm_lines()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n:::\n\n\n## Lixelisation\n\nTo prepare for Network Kernel Density Estimation (NKDE), the road network is divided into small, equal segments called lixels using the lixelize_lines() function from the spNetwork package. Lixels are like pixels for lines, allowing more precise analysis along the network. This process is crucial for accurately studying patterns of childcare centers along the road network. It creates a consistent unit of measurement, which is especially useful when dealing with irregular network structures.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlixels <- lixelize_lines(roads_filtered, \n                         700, \n                         mindist = 500)\nsamples <- lines_center(lixels) \ndensities <- nkde(roads_filtered, \n                  events = rdacc,\n                  w = rep(1, nrow(rdacc)),\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = 100, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(4,4), \n                  max_depth = 8,\n                  agg = 5, \n                  sparse = TRUE,\n                  verbose = FALSE)\nsamples$density <- densities\nlixels$density <- densities\nsummary(samples$density)\n```\n:::\n\n\nThe values seem small. The measurements must be in metres. Let's correct that to km later. Let's save the lixelised data first.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(lixels, \"data/sandbox/lixels.rds\")\nwrite_rds(samples, \"data/sandbox/samples.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlixels <- read_rds(\"data/sandbox/lixels.rds\")\nsamples <- read_rds(\"data/sandbox/samples.rds\")\nsamples$density <- samples$density*1000\nlixels$density <- lixels$density*1000\nsummary(samples$density)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n0.00000 0.00000 0.00000 0.01504 0.00000 2.58070 \n```\n:::\n\n```{.r .cell-code}\nsummary(lixels$density)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n0.00000 0.00000 0.00000 0.01504 0.00000 2.58070 \n```\n:::\n:::\n\n\nThat looks better. Seems that the hotspots are quite scant and concentrated at the top. It would be good to merge everything below the mean, while having more granular breaks in the top quartile to examine the hot spots in more detail.\n\nLet's try to plot it.\n\n## Overall situation of road accidents in BMR\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlixels$display_name <- ifelse(is.na(lixels$name_en), \n                              paste(lixels$highway,\": Unnamed Road\"),\n                              paste(lixels$highway,\": \",lixels$name_en))\n\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ncustom_breaks <- c(0, quantile(lixels$density, c(0.85, \n                                                 0.9, \n                                                 0.95,\n                                                 0.99, \n                                                 1)))\ntm_shape(lixels) +\n  tm_lines(col = \"density\",\n           id = \"display_name\",\n           breaks = custom_breaks,\n           palette = \"YlOrRd\",\n           lwd = 1.5)+\n  tm_shape(admin) +  \n  tm_borders(col = \"black\", lwd = 2, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nThe accident density map of Bangkok and its surrounding provinces reveals significant patterns in road safety across the region. The central area, primarily Bangkok, exhibits the highest concentration of accident hotspots, indicating a greater risk in the urban core. This concentration likely correlates with higher population density, increased traffic volume, and more complex road networks typical of major city centers.\n\nWhile accident density generally decreases towards the outskirts, there are notable hotspots in the peripheral areas surrounding Bangkok. These could represent key transportation corridors or rapidly developing suburban zones with high traffic flow.\n\nThe skewed distribution of accident densities, as shown in the legend, highlights the presence of extreme hotspots amid generally moderate-to-high risk areas. This pattern underscores the need for targeted interventions in specific high-risk locations while also addressing broader regional safety concerns. We should look into them.\n\nThe specific roads that warrant more attention are:\n\n-   Kanchanaphisek Road (both east and west portions of the long road)\n\n-   Bangkok-Chonburi Motorway\n\n-   Borommaratchachonnani Road\n\n-   Rama II Road\n\n-   Suk Sawat Road\n\n-   Industrial Ring Road\n\n# Deeper dive analysis\n\nGiven the large number of road accidents in BMR, the following graphs will help me scope down to the geospatial area where accidents happen.\n\n## Temporal analysis of road accidents\n\nIn the following analysis, let's examine temporal patterns of road accidents in the Bangkok Metropolitan Region from 2019 to 2022. Let's visualize accident frequencies across different time scales, including hours of the day, days of the week, months, and years. This temporal breakdown will help identify high-risk periods influencing accident rates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure datetime columns are properly formatted\nrdacc$incident_datetime <- ymd_hms(rdacc$incident_datetime)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: 16 failed to parse.\n```\n:::\n\n```{.r .cell-code}\n# Create new columns for analysis\nrdacc_inc <- rdacc %>%\n  mutate(\n    hour = hour(incident_datetime),\n    day_of_week = wday(incident_datetime, label = TRUE),\n    month = month(incident_datetime, label = TRUE),\n    year = year(incident_datetime)\n  )\n\n# Accidents by hour of day\nggplot(rdacc_inc, aes(x = hour)) +\n  geom_bar() +\n  labs(title = \"Accidents by Hour of Day\", x = \"Hour\", y = \"Number of Accidents\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 16 rows containing non-finite outside the scale range\n(`stat_count()`).\n```\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#Insight: Accidents appear to happen from 7am to 11am and 7pm.\n\n# Accidents by day of week\nggplot(rdacc_inc, aes(x = day_of_week)) +\n  geom_bar() +\n  labs(title = \"Accidents by Day of Week\", x = \"Day\", y = \"Number of Accidents\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-16-2.png){width=672}\n:::\n\n```{.r .cell-code}\n#Insight: Accidents appear to happen on Friday and Saturday.\n\n# Accidents by month\nggplot(rdacc_inc, aes(x = month)) +\n  geom_bar() +\n  labs(title = \"Accidents by Month\", x = \"Month\", y = \"Number of Accidents\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-16-3.png){width=672}\n:::\n\n```{.r .cell-code}\n#Insight: Accidents appear to happen In Dec, Jan, Apr, and Oct.\n\n# Time series of accidents by date\nrdacc_inc %>%\n  count(date = as.Date(incident_datetime)) %>%\n  ggplot(aes(x = date, y = n)) +\n  geom_line() +\n  labs(title = \"Daily Accident Counts Over Time\", x = \"Date\", y = \"Number of Accidents\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_line()`).\n```\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-16-4.png){width=672}\n:::\n\n```{.r .cell-code}\n#Insight: Accidents spike every year in Jan/ Dec and Apr.\n\n# Time series of accidents by year\nggplot(rdacc_inc, aes(x = year)) +\n  geom_bar() +\n  labs(title = \"Accidents by Year\", x = \"Year\", y = \"Number of Accidents\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 16 rows containing non-finite outside the scale range\n(`stat_count()`).\n```\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-16-5.png){width=672}\n:::\n\n```{.r .cell-code}\n#Insight: Fluctuating with a graduate increase per year.\n```\n:::\n\n\nLet's take a look at two heatmaps that examines when accidents happen.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(viridis)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'viridis' was built under R version 4.3.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: viridisLite\n```\n:::\n\n```{.r .cell-code}\nrdacc_time <- rdacc %>%\n  mutate(\n    month = month(incident_datetime, label = TRUE, abbr = TRUE),\n    hour = hour(incident_datetime)\n  )\n\naccident_counts <- rdacc_time %>%\n  count(month, hour)\n\nggplot(accident_counts, aes(x = hour, y = month, fill = n)) +\n  geom_tile() +\n  scale_fill_viridis(name = \"Number of Accidents\", \n                     option = \"inferno\", \n                     breaks = seq(20, 80, by = 20),\n                     limits = c(20, 80)) +\n  scale_x_continuous(breaks = seq(0, 23, by = 3), \n                     labels = c(\"12am\", \"3am\", \"6am\", \"9am\", \"12pm\", \"3pm\", \"6pm\", \"9pm\")) +\n  scale_y_discrete(limits = rev(levels(accident_counts$month))) +\n  labs(title = \"Heatmap of Accidents by Month and Time of Day\",\n       subtitle = \"Bangkok Metropolitan Region, 2019-2022\",\n       x = \"Time of Day\",\n       y = \"Month\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    legend.position = \"right\",\n    plot.title = element_text(face = \"bold\", size = 14),\n    plot.subtitle = element_text(size = 12, color = \"gray50\"),\n    axis.title = element_text(face = \"bold\")\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_tile()`).\n```\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nIt appears that Jan, Apr, Oct, Dec is worth investigating.\n\nKey observations:\n\n1.  Seasonal trends: Apr and Dec shows consistently high accident rates throughout the day. This could be related to increased holiday traffic or year-end celebrations.\n\n2.  Morning trends: There's a noticeable increase in accidents starting around 6am across most months, likely corresponding to morning rush hour.\n\n3.  Night-time patterns: Accident rates generally decrease late at night (12am-3am), but remain somewhat elevated compared to early morning hours (3am-6am).\n\n## Focused look at Apr\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_apr <- rdacc %>%\n  filter(month(incident_datetime) == 4)\n\nlixels_apr <- lixelize_lines(roads_filtered, \n                         700, \n                         mindist = 500)\nsamples_apr <- lines_center(lixels_apr) \ndensities_apr <- nkde(roads_filtered, \n                  events = rdacc_apr,\n                  w = rep(1, nrow(rdacc_apr)),\n                  samples = samples_apr,\n                  kernel_name = \"quartic\",\n                  bw = 100, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(4,4), \n                  max_depth = 8,\n                  agg = 5, \n                  sparse = TRUE,\n                  verbose = FALSE)\nsamples_apr$density <- densities_apr\nlixels_apr$density <- densities_apr\nsummary(samples_apr$density)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(lixels_apr, \"data/sandbox/lixels_apr.rds\")\nwrite_rds(samples_apr, \"data/sandbox/samples_apr.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlixels_apr <- read_rds(\"data/sandbox/lixels_apr.rds\")\nsamples_apr <- read_rds(\"data/sandbox/samples_apr.rds\")\nsamples_apr$density <- samples_apr$density*1000\nlixels_apr$density <- lixels_apr$density*1000\nsummary(samples_apr$density)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.000000 0.000000 0.000000 0.001457 0.000000 0.468568 \n```\n:::\n\n```{.r .cell-code}\nsummary(lixels_apr$density)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.000000 0.000000 0.000000 0.001457 0.000000 0.468568 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlixels_apr$display_name <- ifelse(is.na(lixels_apr$name_en), \n                              paste(lixels_apr$highway,\": Unnamed Road\"),\n                              paste(lixels_apr$highway,\": \",lixels_apr$name_en))\n\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ncustom_breaks <- c(0, quantile(lixels_apr$density, c(0.99,\n                                                     0.992,\n                                                     0.994,\n                                                     0.996,\n                                                     0.998,\n                                                     1)))\ntm_shape(lixels_apr) +\n  tm_lines(col = \"density\",\n           id = \"display_name\",\n           breaks = custom_breaks,\n           palette = \"YlOrRd\",\n           lwd = 1.5)+\n  tm_shape(admin) +  \n  tm_borders(col = \"black\", lwd = 2, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n:::\n\n\nAccidents are spread across the entire region, but with varying densities. These highways seem to be attracting accidents:\n\n-   Kanchanaphisek Road (east portion of the long road)\n\n-   Bangkok-Chonburi Motorway\n\n-   Borommaratchachonnani Road\n\n-   Industrial Ring Road\n\n## Focused look at Jan and Dec\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_jandec <- rdacc %>%\n  filter(month(incident_datetime) %in% c(1, 12))\n\nlixels_jandec <- lixelize_lines(roads_filtered, \n                         700, \n                         mindist = 500)\nsamples_jandec <- lines_center(lixels_jandec) \ndensities_jandec <- nkde(roads_filtered, \n                  events = rdacc_jandec,\n                  w = rep(1, nrow(rdacc_jandec)),\n                  samples = samples_jandec,\n                  kernel_name = \"quartic\",\n                  bw = 100, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(4,4), \n                  max_depth = 8,\n                  agg = 5, \n                  sparse = TRUE,\n                  verbose = FALSE)\nsamples_jandec$density <- densities_jandec\nlixels_jandec$density <- densities_jandec\nsummary(samples_jandec$density)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(lixels_jandec, \"data/sandbox/lixels_jandec.rds\")\nwrite_rds(samples_jandec, \"data/sandbox/samples_jandec.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlixels_jandec <- read_rds(\"data/sandbox/lixels_jandec.rds\")\nsamples_jandec <- read_rds(\"data/sandbox/samples_jandec.rds\")\nsamples_jandec$density <- samples_jandec$density*1000\nlixels_jandec$density <- lixels_jandec$density*1000\nsummary(samples_jandec$density)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.000000 0.000000 0.000000 0.002753 0.000000 0.658608 \n```\n:::\n\n```{.r .cell-code}\nsummary(lixels_jandec$density)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.000000 0.000000 0.000000 0.002753 0.000000 0.658608 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlixels_jandec$display_name <- ifelse(is.na(lixels_jandec$name_en), \n                                     paste(lixels_jandec$highway,\": Unnamed Road\"),\n                                     paste(lixels_jandec$highway,\": \",lixels_jandec$name_en))\n\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n\n```{.r .cell-code}\ncustom_breaks <- c(0, quantile(lixels_jandec$density, c(0.99,\n                                                     0.992,\n                                                     0.994,\n                                                     0.996,\n                                                     0.998,\n                                                     1)))\ntm_shape(lixels_jandec) +\n  tm_lines(col = \"density\",\n           id = \"display_name\",\n           breaks = custom_breaks,\n           palette = \"YlOrRd\",\n           lwd = 1.5)+\n  tm_shape(admin) +  \n  tm_borders(col = \"black\", lwd = 2, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\ntmap mode set to plotting\n```\n:::\n:::\n\n\nSimilar patterns observed.\n\nWe should be able to merge Apr accidents with that of Jan, Oct and Dec.\n\n# Network constrained G and L function analysis\n\nIn this section, I'm going to test if the road accidents in Bangkok are randomly spread out or if they form patterns. I'll use the *kfunctions()* from the **spNetwork** package to do this.\n\nThe idea I'm testing is: **The road accidents are evenly spread out over Bangkok's road network.**\n\nThis test assumes the accidents could happen anywhere on the roads with equal chance. If the test shows this isn't true, it might mean the accidents are happening in patterns or clusters, not just randomly.\n\nAs the road accident dataset was too large and resulted in runtime error on my machine, I needed to sample a subset of datapoints for the following analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_focus <- rdacc %>%\n  filter(month(incident_datetime) %in% c(1,4,10,12)) %>%\n  slice_sample(n = 1000)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_rdacc <- kfunctions(roads_filtered, \n                         rdacc_focus,\n                         start = 0, \n                         end = 1000, \n                         step = 50, \n                         width = 50, \n                         nsim = 50, \n                         resolution = 50,\n                         verbose = FALSE, \n                         conf_int = 0.05)\nwrite_rds(kfun_rdacc, \"data/sandbox/kfun_rdacc.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkfun_rdacc <- read_rds(\"data/sandbox/kfun_rdacc.rds\")\nkfun_rdacc$plotk\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nInsights from the K Function:\n\n-   Road accidents BMR in Jan, Apr, Oct and Dec (holiday months) are not randomly distributed along the road network.\n\n-   There are significant hotspots or areas of concentration for accidents.\n\n-   This clustering exists at various scales, from local (short distances) to broader areas (longer distances).\n\n-   The pattern suggests there might be specific factors (e.g., dangerous road segments, intersections, or broader area characteristics) contributing to higher accident rates in certain locations.\n\nThis provides a strong basis for further investigation into the factors causing these accident clusters and could be valuable for targeted road safety interventions.\n\n# **Spatio-Temporal Point Patterns Analysis**\n\nFirst let's create the owin file which will be used later.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadmin_owin <- as.owin(admin)\nadmin_owin\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nwindow: polygonal boundary\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n```\n:::\n:::\n\n\nNext, create the dataset to do spatio-temporal analysis. The plot shows how it generally looks like. Everything appears to be in order that road accidents happen on the road network, but it does not tell where it is concentrated in, and when it happens.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroads <- read_rds(\"data/sandbox/roads.rds\")\nrdacc <- read_rds(\"data/sandbox/rdacc.rds\")\nadmin <- read_rds(\"data/sandbox/admin.rds\")\n\nrdacc_spatiotemporal <- rdacc %>% \n  mutate(DayofYear = yday(incident_datetime)) %>%\n  mutate(Month_num = month(incident_datetime)) %>%\n  mutate(Month_fac = month(incident_datetime, \n                           label = TRUE, \n                           abbr = FALSE))\n\ntm_shape(admin) +\n  tm_borders() +    \n  tm_shape(rdacc_spatiotemporal) +\n  tm_dots()         \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n## Temporal analysis\n\nLet's try a simple month breakdown first to see the seasonal changes across months. The December months appear more sparse, but that is roughly all I can tell from visual inspection.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(admin)+\n  tm_polygons() +\ntm_shape(rdacc_spatiotemporal) +\n  tm_dots(size = 0.1) +\ntm_facets(by=\"Month_fac\", \n            free.coords=FALSE, \n            drop.units = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nI'll try to calculate a non-network constrained KDE to examine the hotspots. Simply put, it smooths the road accidents over the owin space. I will need to use ppp for this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_spatiotemporal_month <- rdacc_spatiotemporal %>% \n  dplyr::select(Month_num)\nrdacc_spatiotemporal_month_ppp <- as.ppp(rdacc_spatiotemporal_month)\nrdacc_spatiotemporal_month_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMarked planar point pattern: 12986 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [591277.5, 710166.1] x [1486845.7, 1576520.5] units\n```\n:::\n\n```{.r .cell-code}\nany(duplicated(rdacc_spatiotemporal_month_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nrdacc_spatiotemporal_month_ppp_jit <- rjitter(rdacc_spatiotemporal_month_ppp, \n                                              retry=TRUE, \n                                              nsim=1, \n                                              drop=TRUE)\nany(duplicated(rdacc_spatiotemporal_month_ppp_jit))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nThis next segment plots the points within the owin.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_month_owin <- rdacc_spatiotemporal_month_ppp_jit[admin_owin]\nsummary(rdacc_month_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMarked planar point pattern:  12979 points\nAverage intensity 1.6924e-06 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   4.000   7.000   6.667  10.000  12.000 \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n```\n:::\n\n```{.r .cell-code}\nplot(rdacc_month_owin)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\nThis next segment calculates the KDE within the owin.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_kde <- spattemp.density(rdacc_month_owin)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n```\n:::\n\n```{.r .cell-code}\nsummary(st_kde)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 4255.367 (spatial)\n  lambda = 0.0114 (temporal)\n\nNo. of observations\n  12979 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [587893.5, 712440.5] x [1484414, 1579076]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [4.83487e-18, 6.233343e-09]\n```\n:::\n:::\n\n\nLet's plot the months out to see how it shifts.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntims <- c(1:12)\npar(mfcol=c(2,3))\nfor(i in tims){ \n  plot(st_kde, i, \n       override.par=FALSE, \n       fix.range=TRUE, \n       main=paste(\"KDE at month\",i))\n}\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-35-2.png){width=672}\n:::\n:::\n\n\nMake it a gif.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncreate_and_save_plot <- function(i) {\n  png(filename = paste0(\"kde_plot_month_\", i, \".png\"), \n      width = 800, height = 600)  # Adjust width and height as needed\n  plot(st_kde, i, \n       override.par = FALSE, \n       fix.range = TRUE, \n       main = paste(\"KDE at month\", i))\n  dev.off()\n}\n\n# Create and save each plot separately\nfor(i in tims) {\n  create_and_save_plot(i)\n}\n```\n:::\n\n\nI examine the change using the following gif. It does look like there is a slight increase in road accidents in Apr, but the larger increase is in December and January. However, this is not constrained to a network, so it still does not show which road the accidents are on. So this analysis is insufficient.\n\n![](spatiotemporal.gif)\n\nLet's try network constraining the KDE. First, I'll format the time so that it is counting days.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# converting the Date field to a numeric field (counting months)\nrdacc_spatiotemporal <- rdacc\nrdacc_spatiotemporal$Time <- as.POSIXct(rdacc_spatiotemporal$incident_datetime, format = \"%Y/%m/%d\")\nstart <- as.POSIXct(\"2019/01/01\", format = \"%Y/%m/%d\")\nend <- as.POSIXct(\"2022/12/31\", format = \"%Y/%m/%d\")\nrdacc_spatiotemporal$Time <- difftime(rdacc_spatiotemporal$Time, start, units = \"days\")\nrdacc_spatiotemporal$Time <- as.numeric(rdacc_spatiotemporal$Time)\n\nmonths <- as.character(1:12)\nmonths <- ifelse(nchar(months)==1, paste0(\"0\", months), months)\nmonths_starts_labs <- paste(\"2019/\",months,\"/01\", sep = \"\")\nmonths_starts_num <- as.POSIXct(months_starts_labs, format = \"%Y/%m/%d\")\nmonths_starts_num <- difftime(months_starts_num, start, units = \"days\")\nmonths_starts_num <- as.numeric(months_starts_num)\nmonths_starts_labs <- gsub(\"2019/\", \"\", months_starts_labs, fixed = TRUE)\n\n# Create breaks for each year\nyears <- seq(start, end, by = \"year\")\nyear_breaks <- as.numeric(difftime(years, start, units = \"days\"))\n\n# Create labels for each year\nyear_labels <- format(years, \"%Y\")\n\nggplot(rdacc_spatiotemporal) + \n  geom_histogram(aes(x = Time), bins = 48, color = \"white\") +  # 48 bins for monthly-like divisions\n  scale_x_continuous(breaks = year_breaks, \n                     labels = year_labels,\n                     limits = c(0, max(rdacc_spatiotemporal$Time))) +\n  labs(x = \"Year\", y = \"Frequency\", title = \"Distribution of Incidents Over Time\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_bar()`).\n```\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\nI shall smooth out the number of incidents across days.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw <- rep(1,nrow(rdacc_spatiotemporal))\nsamples <- seq(0, max(rdacc_spatiotemporal$Time), 0.5)\n\nbw1 <- bw.bcv(rdacc_spatiotemporal$Time, nb = 1000, lower = 1, upper = 80)\nbw2 <- bw.ucv(rdacc_spatiotemporal$Time, nb = 1000, lower = 1, upper = 80)\nbw3 <- bw.SJ(rdacc_spatiotemporal$Time, nb = 1000, lower = 1, upper = 80)\n\n\ntime_kernel_values <- data.frame(\n  bw_bcv = tkde(rdacc_spatiotemporal$Time, w = w, samples = samples, bw = bw1, kernel_name = \"quartic\"),\n  bw_ucv = tkde(rdacc_spatiotemporal$Time, w = w, samples = samples, bw = bw2, kernel_name = \"quartic\"),\n  bw_SJ = tkde(rdacc_spatiotemporal$Time, w = w, samples = samples, bw = bw3, kernel_name = \"quartic\"),\n  time = samples\n)\n\ndf_time <- reshape2::melt(time_kernel_values,id.vars = \"time\")\ndf_time$variable <- as.factor(df_time$variable)\n\nggplot(data = df_time) + \n  geom_line(aes(x = time, y = value)) +\n  scale_x_continuous(breaks = year_breaks, \n                     labels = year_labels,\n                     limits = c(0, max(rdacc_spatiotemporal$Time))) +\n  facet_wrap(vars(variable), ncol=2, scales = \"free\")  + \n  theme(axis.text = element_text(size = 5))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\nBy comparing bandwidth selection methods, there are insights into the temporal patterns of road accidents . The BCV and SJ methods particularly highlight meaningful patterns compared to UCV method as it is too noisy and may lead to misinterpretation.\n\n## Spatio-temporal analysis with network constraint\n\nNext we do spatio-temporal analysis. We start by examining the bandwidths that are required to have a useful smoothing.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncv_scores <- bw_tnkde_cv_likelihood_calc(\n  bws_net = seq(1000,10000,2000),\n  bws_time = seq(1,1460,200),\n  lines = roads_filtered,\n  events = rdacc_spatiotemporal,\n  time_field = \"incident_datetime\",\n  w = rep(1, nrow(rdacc_spatiotemporal)),\n  kernel_name = \"quartic\",\n  method = \"discontinuous\",\n  diggle_correction = FALSE,\n  study_area = NULL,\n  max_depth = 10,\n  digits = 2,\n  tol = 0.1,\n  agg = 10,\n  sparse=TRUE,\n  grid_shape=c(20,20),\n  sub_sample=1,\n  verbose = FALSE,\n  check = TRUE)\nwrite_rds(cv_scores, \"data/sandbox/cv_scores.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncv_scores <- read_rds(\"data/sandbox/cv_scores.rds\")\nknitr::kable(cv_scores)\n```\n\n::: {.cell-output-display}\n|     |         1|       201|       401|       601|       801|      1001|      1201|      1401|\n|:----|---------:|---------:|---------:|---------:|---------:|---------:|---------:|---------:|\n|1000 | -706.1509| -705.3445| -704.8251| -703.1704| -702.8447| -701.8549| -700.9763| -700.4512|\n|3000 | -705.0980| -704.1014| -702.7534| -700.4870| -700.0528| -698.6526| -697.3181| -696.6342|\n|5000 | -704.4165| -703.1201| -701.5165| -699.2029| -698.5118| -696.5971| -694.6536| -693.7567|\n|7000 | -703.8892| -702.2912| -700.2770| -697.2513| -696.5538| -694.4873| -692.1887| -690.9826|\n|9000 | -703.6275| -701.6716| -699.3488| -696.0194| -695.1658| -692.9957| -690.0855| -688.8752|\n:::\n:::\n\n\nThe tables show that information does not really. So I shall pick a logical bandwidth to work with - 1km and 60 days.\n\nBut because the KDE calculation is producing errors due to large dataset, I chose to filter the road system again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(roads$highway)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"secondary\"      \"residential\"    \"secondary_link\" \"service\"       \n [5] \"track\"          \"tertiary\"       \"primary\"        \"primary_link\"  \n [9] \"unclassified\"   \"trunk_link\"     \"motorway_link\"  \"motorway\"      \n[13] \"construction\"   \"trunk\"          \"corridor\"       \"tertiary_link\" \n[17] \"raceway\"        \"busway\"         \"road\"           \"proposed\"      \n```\n:::\n\n```{.r .cell-code}\nroads_filtered_again <- roads %>%\n  filter(!is.na(highway) & \n           (highway %in% c(\"secondary\",\n                           \"primary\",\n                           \"trunk\",\n                           \"motorway\")))\nplot(st_geometry(roads_filtered_again))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\nAbove seems ok to use. To make the calculation possible, I also use a sample for the network and accidents.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# choosing sample in times (every 50 days)\nsample_time <- seq(0, max(as.numeric(rdacc_spatiotemporal$Time)), 50)\nrdacc_spatiotemporal_sample <- rdacc_spatiotemporal %>%\n  slice_sample(n = 5000)\nroads_filtered_again_sample <- roads_filtered_again %>%\n  slice_sample(n = 5000)\n\n# calculating densities\ntnkde_densities <- tnkde(lines = roads_filtered_again_sample,\n                         events = rdacc_spatiotemporal_sample,\n                         time_field = \"Time\",\n                         w = rep(1, nrow(rdacc_spatiotemporal_sample)), \n                         samples_loc = samples,\n                         samples_time = sample_time, \n                         kernel_name = \"quartic\",\n                         bw_net = 1000, bw_time = 60,\n                         adaptive = TRUE,\n                         trim_bw_net = 900,\n                         trim_bw_time = 80,\n                         method = \"continuous\",\n                         div = \"bw\", max_depth = 10,\n                         digits = 2, tol = 0.01,\n                         agg = 15, grid_shape = c(1,1), \n                         verbose  = FALSE)\n\nwrite_rds(tnkde_densities, \"data/sandbox/tnkde_densities.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntnkde_densities <- read_rds(\"data/sandbox/tnkde_densities.rds\")\n\n# creating a color palette for all the densities\nlibrary(classInt)\nlibrary(viridis)\nall_densities <- c(tnkde_densities$k)\ncolor_breaks <- classIntervals(all_densities, n = 10, style = \"kmeans\")\n\n# generating a map at each sample time\nall_maps <- lapply(1:ncol(tnkde_densities$k), function(i){\n  time <- sample_time[[i]]\n  date <- as.Date(start) + time\n  \n  samples$density <- tnkde_densities$k[,i]\n  map1 <- tm_shape(samples) + \n  tm_dots(col = \"density\", size = 0.01,\n          breaks = color_breaks$brks, palette = viridis(10)) + \n    tm_layout(legend.show=FALSE, main.title = as.character(date), main.title.size = 0.5)\n  return(map1)\n})\n\n# creating a gif with all the maps\ntmap_animation(all_maps, filename = \"animated_map.gif\", \n               width = 1000, height = 1000, dpi = 300, delay = 50)\n```\n:::\n\n\n![Spatiotemporalgif](animated_map.gif)\n\nThe spatio-temporal map shows that Kanchanaphisek Road, Borommaratchachonnani Road and Industrial Ring Road are serious hotspots for road accidents.\n",
    "supporting": [
      "Take-home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}