---
title: "Take-home Exercise 1"
author: "Leow Xian Zu"
date: "2 Sep 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true 
  message: false #no more warning message
  freeze: true #whatever document already commited does not render
---

# Set up

## Load packages

```{r}

pacman::p_load(
  readr,       # for importing data
  tidyverse,    # for data manipulation and visualization
  sf,           # for spatial data handling
  tmap,         # for thematic maps
  lubridate,    # for date/time manipulation
  spatstat,     # for point pattern analysis
  ggstatsplot,  # for statistical data viz
  maptools,     # for spatial object manipulation
  raster,       # for raster data handling
  sp,           # for spatial data classes and methods
  leaflet,      # for interactive maps
  ggplot2,      # for advanced plotting
  spNetwork     # for spatial network analysis
)
```

## Load files

In this section, we will load and prepare the datasets necessary for our analysis of road traffic accidents in the Bangkok Metropolitan Region (BMR). The BMR, also known as Greater Bangkok, encompasses the city of Bangkok and its surrounding provinces. According to Wikipedia, this area includes Bangkok itself and five adjacent provinces: Nakhon Pathom, Pathum Thani, Nonthaburi, Samut Prakan, and Samut Sakhon. Our analysis will focus on this region, which serves as the political, economic, and cultural heart of Thailand.

We'll be working with three primary datasets: Thailand Road Accident data from 2019-2022, road network data from OpenStreetMap, and administrative boundary data. These datasets will allow us to conduct a comprehensive spatio-temporal analysis of road traffic accidents in this densely populated and economically significant area of Thailand.

## Data Wrangling 1: Correct Coordinate Reference System

In preparing our analysis of road traffic accidents in the Bangkok Metropolitan Region, care is taken to ensure our data is accurate and spatially consistent. First, we import the road accident data from 2019 to 2022 using `read_csv()`, a function chosen for its robust handling of various CSV formats (includes automatic reading of headers and correct tagging of date and time columns). Crucially, we filter out records with missing or empty longitude and latitude values. This step is vital as geographic coordinates are the cornerstone of our spatial analysis; including records without valid locations would skew our results and potentially lead to misleading conclusions about accident patterns.

We then transform this data into a spatial format using `st_as_sf()`. This conversion is essential as it allows us to perform spatial operations and visualisations. We specify the coordinate reference system (CRS) as EPSG:32647, which is tailored for Thailand. This was double-checked on https://epsg.io/. This choice is deliberate - using a local CRS ensures more accurate distance calculations and area representations compared to a global system like WGS84. For the road network data, sourced from OpenStreetMap, we employ `st_read()` to load the shapefile. Recognizing that OSM data can sometimes contain geometry inconsistencies, we apply `st_make_valid()`. This crucial step corrects any invalid geometries that could potentially crash our analysis or produce erroneous results in spatial operations. Lastly, we import administrative boundary data, again ensuring it aligns with our chosen CRS.

```{r}
rdacc_sf <- read_csv("C:/zzzzzuu/ISSS626GAA/Take-home_Ex/Take-home_Ex01/data/thai_road_accident_2019_2022.csv") %>%
  filter(!is.na(longitude) & longitude != "",
         !is.na(latitude) & latitude != "") %>%
  st_as_sf(coords = c(
    "longitude", "latitude"),
    crs=4326) %>%  #WGS84, decimel degree
  st_transform(crs = 32647)  #32647 is Thai's
#read_csv from Readr is better than read.csv base R. It matters for headers with spacing, and also can autodetect dates. 

roads_sf <- st_read("C:/zzzzzuu/ISSS626GAA/Take-home_Ex/Take-home_Ex01/data/hotosm_tha_roads_lines_shp.shp") %>%
  st_make_valid() %>%
  st_set_crs(4326) %>%
  st_transform(crs = 32647)

admin_sf <- st_read(dsn = "C:/zzzzzuu/ISSS626GAA/Take-Home_Ex/Take-Home_Ex01/data", layer = "tha_admbnda_adm1_rtsd_20220121") %>%
  st_set_crs(4326) %>%
  st_transform(crs = 32647)

```

Need to check unit of measurement!!!! See how to convert.

::: callout-tip
## Check that the files are in sf format

```{r}
class(admin_sf)
class(rdacc_sf)
class(roads_sf)
```
:::

```{r}
class(admin_sf)
class(rdacc_sf)
class(roads_sf)
```

## Data Wrangling 2: Filtering to a smaller subset of data

The initial datasets cover all of Thailand and include various road types. To focus on the Bangkok Metropolitan Region (BMR), a spatial filter is applied to extract data for Bangkok and its five adjacent provinces: Nakhon Pathom, Pathum Thani, Nonthaburi, Samut Prakan, and Samut Sakhon. This step reduces data volume and ensures geographic relevance. Additionally, the road network data is filtered to include only roads accessible to motor vehicles, excluding roads like pedestrian paths and cycling lanes. These filtering processes enhance the accuracy of the subsequent analysis by focusing on relevant geographic areas and road types where motor vehicle accidents are likely to occur.

```{r}
bangkok_areas <- c("Bangkok",
                   "Nonthaburi",
                   "Samut Prakan",
                   "Pathum Thani",
                   "Samut Sakhon",
                   "Nakhon Pathom")

admin_sf_bkk <- admin_sf %>%
  filter(!is.na(ADM1_EN) & ADM1_EN %in% bangkok_areas)
unique(admin_sf_bkk$ADM1_EN)     #check
plot(st_geometry(admin_sf_bkk))  #check
st_geometry_type(admin_sf_bkk)   #check

rdacc_sf_bkk <- rdacc_sf %>%
  filter(!is.na(province_en) & province_en %in% bangkok_areas)
unique(rdacc_sf_bkk$province_en) #check
plot(st_geometry(rdacc_sf_bkk))  #check

roads_sf_bkk <- st_intersection(roads_sf, admin_sf_bkk)
unique(roads_sf_bkk$highway)     #check
roads_sf_bkk_veh <- roads_sf_bkk %>%
  filter(!is.na(highway) & 
           !(highway %in% c("pedestrian",
                            "bridleway",
                            "cycleway",
                            "footway",
                            "steps",
                            "path")))
plot(st_geometry(roads_sf_bkk_veh)) #check

```

::: callout-tip
## Thailand Highway Classification

Refer to https://wiki.openstreetmap.org/wiki/WikiProject_Thailand#Highway_classification for definitions of different roads and access that is legally allowed.
:::

## Converting MULTILINESTRINGs to LINESTRINGs

The road network data contains both linestrings and multilinestrings. Multilinestrings represent complex road segments with multiple connected lines, while linestrings are single, continuous lines. Converting all geometries to linestrings simplifies the data structure, ensuring uniformity across the dataset, and makes it easier for lixelisation. This conversion is necessary for consistent analysis, as many spatial operations work more efficiently with simple linestring geometries.

## Check that incident time and report time are in proper format

```{r}
class(rdacc_sf_bkk$incident_datetime)
class(rdacc_sf_bkk$report_datetime)
```

incident_datetime and report_datetime is in POSIXct, which is a datetime structure. It captures, year month date, and time. We can explicitly request for the month of the day... year... day of the year... so on and so forth. This will not appear if it is read.csv!

Lubridate allows us to extract which month of the year, which date of the week from the two fields. Lubridate has functions like day(), wday(), month() to get the respective.

Here's an example of getting month column by using lubridate:

After reading %\>%

mutate(Month = month(incident_datetime))

mutate(Month_fac = month(incident_datetime,

label = TRUE,

abbr = TRUE))

This will derive a field with month column. We can also change it to day of week.

%\>%

mutate(Dayofweek = wday(incident_datetime))

After done, use write_rds(acc, "data/rds/acc.rds")

This will save the file

Now the processing file is redundance, insert **#\| eval: false** to reduce computation.

To use the tidy clean file, we should use "acc \<- read_rds("data/rds/acc.rds") It should work.

Need to convert accident data from csv to sf

Consider creating folder called sandbox.

as long as it's in data folder, it will not push over.

networks have to be in LINESTRING version. not MULTILINE. MULTILINE STRING don't work. If we happen to have that, use SF to break into single line. Pay attention because in openstreetmap it will be multi line string. Will give error message in code.

Junction? it's in the accident datapoint.

Bangkok metropolitan region. The way we use it is to use the names of the provinces in the wiki. Select out all these 6 regions. That will define the area. We have to DIY this.

Filter out from HDX (then write into rds)
