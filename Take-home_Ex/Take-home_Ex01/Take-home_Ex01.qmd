---
title: "Take-home Exercise 1"
author: "Leow Xian Zu"
date: "2 Sep 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true 
  message: false #no more warning message
  freeze: true #whatever document already commited does not render
---

# Set up

## Load packages

```{r}

pacman::p_load(
  readr,       # for importing data
  tidyverse,    # for data manipulation and visualization
  sf,           # for spatial data handling
  tmap,         # for thematic maps
  lubridate,    # for date/time manipulation
  spatstat,     # for point pattern analysis
  ggstatsplot,  # for statistical data viz
  maptools,     # for spatial object manipulation
  raster,       # for raster data handling
  sp,           # for spatial data classes and methods
  leaflet,      # for interactive maps
  ggplot2,      # for advanced plotting
  spNetwork,    # for spatial network analysis
  sparr,        # for spatio-temporal analysis
  KernSmooth    # for kernel smoothing
)
set.seed(1234)
```

## Load files

In this section, we will load and prepare the datasets necessary for our analysis of road traffic accidents in the Bangkok Metropolitan Region (BMR). The BMR, also known as Greater Bangkok, encompasses the city of Bangkok and its surrounding provinces. According to Wikipedia, this area includes Bangkok itself and five adjacent provinces: Nakhon Pathom, Pathum Thani, Nonthaburi, Samut Prakan, and Samut Sakhon. Our analysis will focus on this region, which serves as the political, economic, and cultural heart of Thailand.

We'll be working with three primary datasets: Thailand Road Accident data from 2019-2022, road network data from OpenStreetMap, and administrative boundary data. These datasets will allow us to conduct a comprehensive spatio-temporal analysis of road traffic accidents in this densely populated and economically significant area of Thailand.

## Data Wrangling 1: Correct Coordinate Reference System

In preparing our analysis of road traffic accidents in the Bangkok Metropolitan Region, care is taken to ensure our data is accurate and spatially consistent. First, we import the road accident data from 2019 to 2022 using `read_csv()`, a function chosen for its robust handling of various CSV formats (includes automatic reading of headers and correct tagging of date and time columns). Crucially, we filter out records with missing or empty longitude and latitude values. This step is vital as geographic coordinates are the cornerstone of our spatial analysis; including records without valid locations would skew our results and potentially lead to misleading conclusions about accident patterns.

We then transform this data into a spatial format using `st_as_sf()`. This conversion is essential as it allows us to perform spatial operations and visualisations. We specify the coordinate reference system (CRS) as EPSG:32647, which is tailored for Thailand. This was double-checked on https://epsg.io/. This choice is deliberate - using a local CRS ensures more accurate distance calculations and area representations compared to a global system like WGS84. For the road network data, sourced from OpenStreetMap, we employ `st_read()` to load the shapefile. Recognizing that OSM data can sometimes contain geometry inconsistencies, we apply `st_make_valid()`. This crucial step corrects any invalid geometries that could potentially crash our analysis or produce erroneous results in spatial operations. Lastly, we import administrative boundary data, again ensuring it aligns with our chosen CRS.

```{r}
#| eval: false
rdacc_sf <- read_csv("C:/zzzzzuu/ISSS626GAA/Take-home_Ex/Take-home_Ex01/data/thai_road_accident_2019_2022.csv") %>%
  filter(!is.na(longitude) & longitude != "",
         !is.na(latitude) & latitude != "") %>%
  st_as_sf(coords = c(
    "longitude", "latitude"),
    crs=4326) %>%  #WGS84, decimel degree
  st_transform(crs = 32647)  #32647 is Thai's
#read_csv from Readr is better than read.csv base R. It matters for headers with spacing, and also can autodetect dates. 

roads_sf <- st_read("C:/zzzzzuu/ISSS626GAA/Take-home_Ex/Take-home_Ex01/data/hotosm_tha_roads_lines_shp.shp") %>%
  st_make_valid() %>%
  st_set_crs(4326) %>%
  st_transform(crs = 32647)

admin_sf <- st_read(dsn = "C:/zzzzzuu/ISSS626GAA/Take-Home_Ex/Take-Home_Ex01/data", layer = "tha_admbnda_adm1_rtsd_20220121") %>%
  st_set_crs(4326) %>%
  st_transform(crs = 32647)

```

Need to check unit of measurement!!!! See how to convert.

```{r}
#| eval: false
class(admin_sf)
class(rdacc_sf)
class(roads_sf)
```

## Check date and time format (POSIXct)

```{r}
#| eval: false
class(rdacc_sf$incident_datetime)
class(rdacc_sf$report_datetime)
```

The incident_datetime and report_datetime fields are stored in POSIXct format, a structure that captures year, month, date, and time information. This format allows for easy extraction of specific temporal components such as month, day of the year, or year via lubridate package. The level of detail and flexibility in datetime handling is only available when the data is properly imported and parsed using readr.

## Data Wrangling 2: Filtering to a smaller subset of data

The initial datasets cover all of Thailand and include various road types. To focus on the Bangkok Metropolitan Region (BMR), a spatial filter is applied to extract data for Bangkok and its five adjacent provinces: Nakhon Pathom, Pathum Thani, Nonthaburi, Samut Prakan, and Samut Sakhon. This step reduces data volume and ensures geographic relevance. Additionally, the road network data is filtered to include only roads accessible to motor vehicles, excluding roads like pedestrian paths and cycling lanes. These filtering processes enhance the accuracy of the subsequent analysis by focusing on relevant geographic areas and road types where motor vehicle accidents are likely to occur.

```{r}
#| eval: false
bangkok_areas <- c("Bangkok",
                   "Nonthaburi",
                   "Samut Prakan",
                   "Pathum Thani",
                   "Samut Sakhon",
                   "Nakhon Pathom")

admin_sf_bkk <- admin_sf %>%
  filter(!is.na(ADM1_EN) & ADM1_EN %in% bangkok_areas)
unique(admin_sf_bkk$ADM1_EN)     #check
plot(st_geometry(admin_sf_bkk))  #check
st_geometry_type(admin_sf_bkk)   #check

rdacc_sf_bkk <- rdacc_sf %>%
  filter(!is.na(province_en) & province_en %in% bangkok_areas)
unique(rdacc_sf_bkk$province_en) #check
plot(st_geometry(rdacc_sf_bkk))  #check

roads_sf_bkk <- st_intersection(roads_sf, admin_sf_bkk)
unique(roads_sf_bkk$highway)     #check
roads_sf_bkk_veh <- roads_sf_bkk %>%
  filter(!is.na(highway) & 
           !(highway %in% c("pedestrian",
                            "bridleway",
                            "cycleway",
                            "footway",
                            "steps",
                            "path")))
plot(st_geometry(roads_sf_bkk_veh)) #check

```

::: callout-tip
## Thailand Highway Classification

Refer to https://wiki.openstreetmap.org/wiki/WikiProject_Thailand#Highway_classification for definitions of different roads and access that is legally allowed.
:::

## Converting MULTILINESTRINGs to LINESTRINGs

The road network data contains both linestrings and multilinestrings. Multilinestrings represent complex road segments with multiple connected lines, while linestrings are single, continuous lines. Converting all geometries to linestrings simplifies the data structure, ensuring uniformity across the dataset, and makes it easier for lixelisation. This conversion is necessary for consistent analysis, as many spatial operations work more efficiently with simple linestring geometries.

```{r}
#| eval: false
geometry_types <- roads_sf_bkk_veh %>%
  st_geometry_type() %>%
  as.character() %>%
  unique()

if(length(geometry_types) == 1 && geometry_types == "LINESTRING") {
  print("All geometries are LINESTRING")
} else {
  print("Not all geometries are LINESTRING. Types found:")
  print(geometry_types)
}


roads_sf_bkk_veh_ls <- roads_sf_bkk_veh %>%
  st_cast("MULTILINESTRING", group_or_split = TRUE) %>%  
  st_cast("LINESTRING")


geometry_types <- roads_sf_bkk_veh_ls %>%
  st_geometry_type() %>%
  as.character() %>%
  unique()

if(length(geometry_types) == 1 && geometry_types == "LINESTRING") {
  print("All geometries are LINESTRING")
} else {
  print("Not all geometries are LINESTRING. Types found:")
  print(geometry_types)
}
```

## Write a smaller subset of the data for easier compute times

This segment makes our data smaller and easier to work with. It is savedin a special format (RDS) in a 'sandbox' folder. This helps my computer run faster and keeps the project tidy. I used commands to save and load data, and tell some parts of our code not to run again if not needed.

```{r}
#| eval: false
write_rds(roads_sf_bkk_veh_ls, "data/sandbox/roads.rds")
write_rds(rdacc_sf_bkk, "data/sandbox/rdacc.rds")
write_rds(admin_sf_bkk, "data/sandbox/admin.rds")

```

```{r}
roads <- read_rds("data/sandbox/roads.rds")
rdacc <- read_rds("data/sandbox/rdacc.rds")
admin <- read_rds("data/sandbox/admin.rds")
```

# Overall Analysis

Roads dataset is still too dense. It is difficult to make meaningful insights out of it, so we will drop more, smaller roads.

```{r}
unique(roads$highway)
roads_filtered <- roads %>%
  filter(!is.na(highway) & 
           (highway %in% c("secondary",
                           "secondary_link",
                           "primary",
                           "primary_link",
                           "trunk_link",
                           "trunk",
                           "motorway",
                           "motorway_link",
                           "tertiary_link",
                           "tertiary")))
plot(st_geometry(roads_filtered))
```

```{r}
#| eval: false
tmap_mode('plot')
tm_shape(rdacc) +
  tm_dots(col = "red", size = 0.1) +
  tm_shape(roads_filtered) +
  tm_lines()
```

```{r}
#| eval: false
tmap_mode('plot')
```

## Lixelisation

To prepare for Network Kernel Density Estimation (NKDE), the road network is divided into small, equal segments called lixels using the lixelize_lines() function from the spNetwork package. Lixels are like pixels for lines, allowing more precise analysis along the network. This process is crucial for accurately studying patterns of childcare centers along the road network. It creates a consistent unit of measurement, which is especially useful when dealing with irregular network structures.

```{r}
#| eval: false
lixels <- lixelize_lines(roads_filtered, 
                         700, 
                         mindist = 500)
samples <- lines_center(lixels) 
densities <- nkde(roads_filtered, 
                  events = rdacc,
                  w = rep(1, nrow(rdacc)),
                  samples = samples,
                  kernel_name = "quartic",
                  bw = 100, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(4,4), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)
samples$density <- densities
lixels$density <- densities
summary(samples$density)


```

The values seem small. The measurements must be in metres. Let's correct that to km later. Let's save the lixelised data first.

```{r}
#| eval: false
write_rds(lixels, "data/sandbox/lixels.rds")
write_rds(samples, "data/sandbox/samples.rds")
```

```{r}
lixels <- read_rds("data/sandbox/lixels.rds")
samples <- read_rds("data/sandbox/samples.rds")
samples$density <- samples$density*1000
lixels$density <- lixels$density*1000
summary(samples$density)
summary(lixels$density)
```

That looks better. Seems that the hotspots are quite scant and concentrated at the top. It would be good to merge everything below the mean, while having more granular breaks in the top quartile to examine the hot spots in more detail.

Let's try to plot it.

## Overall situation of road accidents in BMR

```{r}

lixels$display_name <- ifelse(is.na(lixels$name_en), 
                              paste(lixels$highway,": Unnamed Road"),
                              paste(lixels$highway,": ",lixels$name_en))

tmap_mode('plot')
custom_breaks <- c(0, quantile(lixels$density, c(0.85, 
                                                 0.9, 
                                                 0.95,
                                                 0.99, 
                                                 1)))
tm_shape(lixels) +
  tm_lines(col = "density",
           id = "display_name",
           breaks = custom_breaks,
           palette = "YlOrRd",
           lwd = 1.5)+
  tm_shape(admin) +  
  tm_borders(col = "black", lwd = 2, alpha = 0.5)



```

The accident density map of Bangkok and its surrounding provinces reveals significant patterns in road safety across the region. The central area, primarily Bangkok, exhibits the highest concentration of accident hotspots, indicating a greater risk in the urban core. This concentration likely correlates with higher population density, increased traffic volume, and more complex road networks typical of major city centers.

While accident density generally decreases towards the outskirts, there are notable hotspots in the peripheral areas surrounding Bangkok. These could represent key transportation corridors or rapidly developing suburban zones with high traffic flow.

The skewed distribution of accident densities, as shown in the legend, highlights the presence of extreme hotspots amid generally moderate-to-high risk areas. This pattern underscores the need for targeted interventions in specific high-risk locations while also addressing broader regional safety concerns. We should look into them.

The specific roads that warrant more attention are:

-   Kanchanaphisek Road (both east and west portions of the long road)

-   Bangkok-Chonburi Motorway

-   Borommaratchachonnani Road

-   Rama II Road

-   Suk Sawat Road

-   Industrial Ring Road

# Deeper dive analysis

Given the large number of road accidents in BMR, the following graphs will help me scope down to the geospatial area where accidents happen.

## Temporal analysis of road accidents

In the following analysis, let's examine temporal patterns of road accidents in the Bangkok Metropolitan Region from 2019 to 2022. Let's visualize accident frequencies across different time scales, including hours of the day, days of the week, months, and years. This temporal breakdown will help identify high-risk periods influencing accident rates.

```{r}
# Ensure datetime columns are properly formatted
rdacc$incident_datetime <- ymd_hms(rdacc$incident_datetime)

# Create new columns for analysis
rdacc_inc <- rdacc %>%
  mutate(
    hour = hour(incident_datetime),
    day_of_week = wday(incident_datetime, label = TRUE),
    month = month(incident_datetime, label = TRUE),
    year = year(incident_datetime)
  )

# Accidents by hour of day
ggplot(rdacc_inc, aes(x = hour)) +
  geom_bar() +
  labs(title = "Accidents by Hour of Day", x = "Hour", y = "Number of Accidents")

#Insight: Accidents appear to happen from 7am to 11am and 7pm.

# Accidents by day of week
ggplot(rdacc_inc, aes(x = day_of_week)) +
  geom_bar() +
  labs(title = "Accidents by Day of Week", x = "Day", y = "Number of Accidents")

#Insight: Accidents appear to happen on Friday and Saturday.

# Accidents by month
ggplot(rdacc_inc, aes(x = month)) +
  geom_bar() +
  labs(title = "Accidents by Month", x = "Month", y = "Number of Accidents")

#Insight: Accidents appear to happen In Dec, Jan, Apr, and Oct.

# Time series of accidents by date
rdacc_inc %>%
  count(date = as.Date(incident_datetime)) %>%
  ggplot(aes(x = date, y = n)) +
  geom_line() +
  labs(title = "Daily Accident Counts Over Time", x = "Date", y = "Number of Accidents")

#Insight: Accidents spike every year in Jan/ Dec and Apr.

# Time series of accidents by year
ggplot(rdacc_inc, aes(x = year)) +
  geom_bar() +
  labs(title = "Accidents by Year", x = "Year", y = "Number of Accidents")

#Insight: Fluctuating with a graduate increase per year.
```

Let's take a look at two heatmaps that examines when accidents happen.

```{r}
library(viridis)

rdacc_time <- rdacc %>%
  mutate(
    month = month(incident_datetime, label = TRUE, abbr = TRUE),
    hour = hour(incident_datetime)
  )

accident_counts <- rdacc_time %>%
  count(month, hour)

ggplot(accident_counts, aes(x = hour, y = month, fill = n)) +
  geom_tile() +
  scale_fill_viridis(name = "Number of Accidents", 
                     option = "inferno", 
                     breaks = seq(20, 80, by = 20),
                     limits = c(20, 80)) +
  scale_x_continuous(breaks = seq(0, 23, by = 3), 
                     labels = c("12am", "3am", "6am", "9am", "12pm", "3pm", "6pm", "9pm")) +
  scale_y_discrete(limits = rev(levels(accident_counts$month))) +
  labs(title = "Heatmap of Accidents by Month and Time of Day",
       subtitle = "Bangkok Metropolitan Region, 2019-2022",
       x = "Time of Day",
       y = "Month") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    legend.position = "right",
    plot.title = element_text(face = "bold", size = 14),
    plot.subtitle = element_text(size = 12, color = "gray50"),
    axis.title = element_text(face = "bold")
  )
```

It appears that Jan, Apr, Oct, Dec is worth investigating.

Key observations:

1.  Seasonal trends: Apr and Dec shows consistently high accident rates throughout the day. This could be related to increased holiday traffic or year-end celebrations.

2.  Morning trends: There's a noticeable increase in accidents starting around 6am across most months, likely corresponding to morning rush hour.

3.  Night-time patterns: Accident rates generally decrease late at night (12am-3am), but remain somewhat elevated compared to early morning hours (3am-6am).

## Focused look at Apr

```{r}
#| eval: False
rdacc_apr <- rdacc %>%
  filter(month(incident_datetime) == 4)

lixels_apr <- lixelize_lines(roads_filtered, 
                         700, 
                         mindist = 500)
samples_apr <- lines_center(lixels_apr) 
densities_apr <- nkde(roads_filtered, 
                  events = rdacc_apr,
                  w = rep(1, nrow(rdacc_apr)),
                  samples = samples_apr,
                  kernel_name = "quartic",
                  bw = 100, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(4,4), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)
samples_apr$density <- densities_apr
lixels_apr$density <- densities_apr
summary(samples_apr$density)


```

```{r}
#| eval: False
write_rds(lixels_apr, "data/sandbox/lixels_apr.rds")
write_rds(samples_apr, "data/sandbox/samples_apr.rds")
```

```{r}
lixels_apr <- read_rds("data/sandbox/lixels_apr.rds")
samples_apr <- read_rds("data/sandbox/samples_apr.rds")
samples_apr$density <- samples_apr$density*1000
lixels_apr$density <- lixels_apr$density*1000
summary(samples_apr$density)
summary(lixels_apr$density)
```

```{r}
lixels_apr$display_name <- ifelse(is.na(lixels_apr$name_en), 
                              paste(lixels_apr$highway,": Unnamed Road"),
                              paste(lixels_apr$highway,": ",lixels_apr$name_en))

tmap_mode('plot')
custom_breaks <- c(0, quantile(lixels_apr$density, c(0.99,
                                                     0.992,
                                                     0.994,
                                                     0.996,
                                                     0.998,
                                                     1)))
tm_shape(lixels_apr) +
  tm_lines(col = "density",
           id = "display_name",
           breaks = custom_breaks,
           palette = "YlOrRd",
           lwd = 1.5)+
  tm_shape(admin) +  
  tm_borders(col = "black", lwd = 2, alpha = 0.5)

tmap_mode('plot')
```

Accidents are spread across the entire region, but with varying densities. These highways seem to be attracting accidents:

-   Kanchanaphisek Road (east portion of the long road)

-   Bangkok-Chonburi Motorway

-   Borommaratchachonnani Road

-   Industrial Ring Road

## Focused look at Jan and Dec

```{r}
#| eval: False
rdacc_jandec <- rdacc %>%
  filter(month(incident_datetime) %in% c(1, 12))

lixels_jandec <- lixelize_lines(roads_filtered, 
                         700, 
                         mindist = 500)
samples_jandec <- lines_center(lixels_jandec) 
densities_jandec <- nkde(roads_filtered, 
                  events = rdacc_jandec,
                  w = rep(1, nrow(rdacc_jandec)),
                  samples = samples_jandec,
                  kernel_name = "quartic",
                  bw = 100, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(4,4), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)
samples_jandec$density <- densities_jandec
lixels_jandec$density <- densities_jandec
summary(samples_jandec$density)
```

```{r}
#| eval: False
write_rds(lixels_jandec, "data/sandbox/lixels_jandec.rds")
write_rds(samples_jandec, "data/sandbox/samples_jandec.rds")
```

```{r}
lixels_jandec <- read_rds("data/sandbox/lixels_jandec.rds")
samples_jandec <- read_rds("data/sandbox/samples_jandec.rds")
samples_jandec$density <- samples_jandec$density*1000
lixels_jandec$density <- lixels_jandec$density*1000
summary(samples_jandec$density)
summary(lixels_jandec$density)
```

```{r}
lixels_jandec$display_name <- ifelse(is.na(lixels_jandec$name_en), 
                                     paste(lixels_jandec$highway,": Unnamed Road"),
                                     paste(lixels_jandec$highway,": ",lixels_jandec$name_en))

tmap_mode('plot')
custom_breaks <- c(0, quantile(lixels_jandec$density, c(0.99,
                                                     0.992,
                                                     0.994,
                                                     0.996,
                                                     0.998,
                                                     1)))
tm_shape(lixels_jandec) +
  tm_lines(col = "density",
           id = "display_name",
           breaks = custom_breaks,
           palette = "YlOrRd",
           lwd = 1.5)+
  tm_shape(admin) +  
  tm_borders(col = "black", lwd = 2, alpha = 0.5)

tmap_mode('plot')
```

Similar patterns observed.

We should be able to merge Apr accidents with that of Jan, Oct and Dec.

# Network constrained G and L function analysis

In this section, I'm going to test if the road accidents in Bangkok are randomly spread out or if they form patterns. I'll use the *kfunctions()* from the **spNetwork** package to do this.

The idea I'm testing is: **The road accidents are evenly spread out over Bangkok's road network.**

This test assumes the accidents could happen anywhere on the roads with equal chance. If the test shows this isn't true, it might mean the accidents are happening in patterns or clusters, not just randomly.

As the road accident dataset was too large and resulted in runtime error on my machine, I needed to sample a subset of datapoints for the following analysis.

```{r}
#| eval: False
rdacc_focus <- rdacc %>%
  filter(month(incident_datetime) %in% c(1,4,10,12)) %>%
  slice_sample(n = 1000)
```

```{r}
#| eval: false
kfun_rdacc <- kfunctions(roads_filtered, 
                         rdacc_focus,
                         start = 0, 
                         end = 1000, 
                         step = 50, 
                         width = 50, 
                         nsim = 50, 
                         resolution = 50,
                         verbose = FALSE, 
                         conf_int = 0.05)
write_rds(kfun_rdacc, "data/sandbox/kfun_rdacc.rds")

```

```{r}
kfun_rdacc <- read_rds("data/sandbox/kfun_rdacc.rds")
kfun_rdacc$plotk
```

Insights from the K Function:

-   Road accidents BMR in Jan, Apr, Oct and Dec (holiday months) are not randomly distributed along the road network.

-   There are significant hotspots or areas of concentration for accidents.

-   This clustering exists at various scales, from local (short distances) to broader areas (longer distances).

-   The pattern suggests there might be specific factors (e.g., dangerous road segments, intersections, or broader area characteristics) contributing to higher accident rates in certain locations.

This provides a strong basis for further investigation into the factors causing these accident clusters and could be valuable for targeted road safety interventions.

# **Spatio-Temporal Point Patterns Analysis**

First let's create the owin file which will be used later.

```{r}
admin_owin <- as.owin(admin)
admin_owin
```

Next, create the dataset to do spatio-temporal analysis. The plot shows how it generally looks like. Everything appears to be in order that road accidents happen on the road network, but it does not tell where it is concentrated in, and when it happens.

```{r}
roads <- read_rds("data/sandbox/roads.rds")
rdacc <- read_rds("data/sandbox/rdacc.rds")
admin <- read_rds("data/sandbox/admin.rds")

rdacc_spatiotemporal <- rdacc %>% 
  mutate(DayofYear = yday(incident_datetime)) %>%
  mutate(Month_num = month(incident_datetime)) %>%
  mutate(Month_fac = month(incident_datetime, 
                           label = TRUE, 
                           abbr = FALSE))

tm_shape(admin) +
  tm_borders() +    
  tm_shape(rdacc_spatiotemporal) +
  tm_dots()         
```

## Temporal analysis

Let's try a simple month breakdown first to see the seasonal changes across months. The December months appear more sparse, but that is roughly all I can tell from visual inspection.

```{r}
tm_shape(admin)+
  tm_polygons() +
tm_shape(rdacc_spatiotemporal) +
  tm_dots(size = 0.1) +
tm_facets(by="Month_fac", 
            free.coords=FALSE, 
            drop.units = TRUE)
```

I'll try to calculate a non-network constrained KDE to examine the hotspots. Simply put, it smooths the road accidents over the owin space. I will need to use ppp for this.

```{r}
rdacc_spatiotemporal_month <- rdacc_spatiotemporal %>% 
  dplyr::select(Month_num)
rdacc_spatiotemporal_month_ppp <- as.ppp(rdacc_spatiotemporal_month)
rdacc_spatiotemporal_month_ppp
any(duplicated(rdacc_spatiotemporal_month_ppp))
rdacc_spatiotemporal_month_ppp_jit <- rjitter(rdacc_spatiotemporal_month_ppp, 
                                              retry=TRUE, 
                                              nsim=1, 
                                              drop=TRUE)
any(duplicated(rdacc_spatiotemporal_month_ppp_jit))
```

This next segment plots the points within the owin.

```{r}
rdacc_month_owin <- rdacc_spatiotemporal_month_ppp_jit[admin_owin]
summary(rdacc_month_owin)
plot(rdacc_month_owin)

```

This next segment calculates the KDE within the owin.

```{r}
st_kde <- spattemp.density(rdacc_month_owin)
summary(st_kde)

```

Let's plot the months out to see how it shifts.

```{r}
tims <- c(1:12)
par(mfcol=c(2,3))
for(i in tims){ 
  plot(st_kde, i, 
       override.par=FALSE, 
       fix.range=TRUE, 
       main=paste("KDE at month",i))
}

```

Make it a gif.

```{r}
#| eval: false
create_and_save_plot <- function(i) {
  png(filename = paste0("kde_plot_month_", i, ".png"), 
      width = 800, height = 600)  # Adjust width and height as needed
  plot(st_kde, i, 
       override.par = FALSE, 
       fix.range = TRUE, 
       main = paste("KDE at month", i))
  dev.off()
}

# Create and save each plot separately
for(i in tims) {
  create_and_save_plot(i)
}
```

I examine the change using the following gif. It does look like there is a slight increase in road accidents in Apr, but the larger increase is in December and January. However, this is not constrained to a network, so it still does not show which road the accidents are on. So this analysis is insufficient.

![](spatiotemporal.gif)

Let's try network constraining the KDE. First, I'll format the time so that it is counting days.

```{r}
# converting the Date field to a numeric field (counting months)
rdacc_spatiotemporal <- rdacc
rdacc_spatiotemporal$Time <- as.POSIXct(rdacc_spatiotemporal$incident_datetime, format = "%Y/%m/%d")
start <- as.POSIXct("2019/01/01", format = "%Y/%m/%d")
end <- as.POSIXct("2022/12/31", format = "%Y/%m/%d")
rdacc_spatiotemporal$Time <- difftime(rdacc_spatiotemporal$Time, start, units = "days")
rdacc_spatiotemporal$Time <- as.numeric(rdacc_spatiotemporal$Time)

months <- as.character(1:12)
months <- ifelse(nchar(months)==1, paste0("0", months), months)
months_starts_labs <- paste("2019/",months,"/01", sep = "")
months_starts_num <- as.POSIXct(months_starts_labs, format = "%Y/%m/%d")
months_starts_num <- difftime(months_starts_num, start, units = "days")
months_starts_num <- as.numeric(months_starts_num)
months_starts_labs <- gsub("2019/", "", months_starts_labs, fixed = TRUE)

# Create breaks for each year
years <- seq(start, end, by = "year")
year_breaks <- as.numeric(difftime(years, start, units = "days"))

# Create labels for each year
year_labels <- format(years, "%Y")

ggplot(rdacc_spatiotemporal) + 
  geom_histogram(aes(x = Time), bins = 48, color = "white") +  # 48 bins for monthly-like divisions
  scale_x_continuous(breaks = year_breaks, 
                     labels = year_labels,
                     limits = c(0, max(rdacc_spatiotemporal$Time))) +
  labs(x = "Year", y = "Frequency", title = "Distribution of Incidents Over Time") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))




```

I shall smooth out the number of incidents across days.

```{r}
w <- rep(1,nrow(rdacc_spatiotemporal))
samples <- seq(0, max(rdacc_spatiotemporal$Time), 0.5)

bw1 <- bw.bcv(rdacc_spatiotemporal$Time, nb = 1000, lower = 1, upper = 80)
bw2 <- bw.ucv(rdacc_spatiotemporal$Time, nb = 1000, lower = 1, upper = 80)
bw3 <- bw.SJ(rdacc_spatiotemporal$Time, nb = 1000, lower = 1, upper = 80)


time_kernel_values <- data.frame(
  bw_bcv = tkde(rdacc_spatiotemporal$Time, w = w, samples = samples, bw = bw1, kernel_name = "quartic"),
  bw_ucv = tkde(rdacc_spatiotemporal$Time, w = w, samples = samples, bw = bw2, kernel_name = "quartic"),
  bw_SJ = tkde(rdacc_spatiotemporal$Time, w = w, samples = samples, bw = bw3, kernel_name = "quartic"),
  time = samples
)

df_time <- reshape2::melt(time_kernel_values,id.vars = "time")
df_time$variable <- as.factor(df_time$variable)

ggplot(data = df_time) + 
  geom_line(aes(x = time, y = value)) +
  scale_x_continuous(breaks = year_breaks, 
                     labels = year_labels,
                     limits = c(0, max(rdacc_spatiotemporal$Time))) +
  facet_wrap(vars(variable), ncol=2, scales = "free")  + 
  theme(axis.text = element_text(size = 5))
```

By comparing bandwidth selection methods, there are insights into the temporal patterns of road accidents . The BCV and SJ methods particularly highlight meaningful patterns compared to UCV method as it is too noisy and may lead to misinterpretation.

## Spatio-temporal analysis with network constraint

Next we do spatio-temporal analysis. We start by examining the bandwidths that are required to have a useful smoothing.

```{r}
#| eval: false
cv_scores <- bw_tnkde_cv_likelihood_calc(
  bws_net = seq(1000,10000,2000),
  bws_time = seq(1,1460,200),
  lines = roads_filtered,
  events = rdacc_spatiotemporal,
  time_field = "incident_datetime",
  w = rep(1, nrow(rdacc_spatiotemporal)),
  kernel_name = "quartic",
  method = "discontinuous",
  diggle_correction = FALSE,
  study_area = NULL,
  max_depth = 10,
  digits = 2,
  tol = 0.1,
  agg = 10,
  sparse=TRUE,
  grid_shape=c(20,20),
  sub_sample=1,
  verbose = FALSE,
  check = TRUE)
write_rds(cv_scores, "data/sandbox/cv_scores.rds")
```

```{r}
cv_scores <- read_rds("data/sandbox/cv_scores.rds")
knitr::kable(cv_scores)
```

The tables show that information does not really. So I shall pick a logical bandwidth to work with - 1km and 60 days.

But because the KDE calculation is producing errors due to large dataset, I chose to filter the road system again.

```{r}
unique(roads$highway)
roads_filtered_again <- roads %>%
  filter(!is.na(highway) & 
           (highway %in% c("secondary",
                           "primary",
                           "trunk",
                           "motorway")))
plot(st_geometry(roads_filtered_again))
```

Above seems ok to use. To make the calculation possible, I also use a sample for the network and accidents.

```{r}
#| eval: False
# choosing sample in times (every 50 days)
sample_time <- seq(0, max(as.numeric(rdacc_spatiotemporal$Time)), 50)
rdacc_spatiotemporal_sample <- rdacc_spatiotemporal %>%
  slice_sample(n = 5000)
roads_filtered_again_sample <- roads_filtered_again %>%
  slice_sample(n = 5000)

# calculating densities
tnkde_densities <- tnkde(lines = roads_filtered_again_sample,
                         events = rdacc_spatiotemporal_sample,
                         time_field = "Time",
                         w = rep(1, nrow(rdacc_spatiotemporal_sample)), 
                         samples_loc = samples,
                         samples_time = sample_time, 
                         kernel_name = "quartic",
                         bw_net = 1000, bw_time = 60,
                         adaptive = TRUE,
                         trim_bw_net = 900,
                         trim_bw_time = 80,
                         method = "continuous",
                         div = "bw", max_depth = 10,
                         digits = 2, tol = 0.01,
                         agg = 15, grid_shape = c(1,1), 
                         verbose  = FALSE)

write_rds(tnkde_densities, "data/sandbox/tnkde_densities.rds")

```

```{r}
#| eval: False
tnkde_densities <- read_rds("data/sandbox/tnkde_densities.rds")

# creating a color palette for all the densities
library(classInt)
library(viridis)
all_densities <- c(tnkde_densities$k)
color_breaks <- classIntervals(all_densities, n = 10, style = "kmeans")

# generating a map at each sample time
all_maps <- lapply(1:ncol(tnkde_densities$k), function(i){
  time <- sample_time[[i]]
  date <- as.Date(start) + time
  
  samples$density <- tnkde_densities$k[,i]
  map1 <- tm_shape(samples) + 
  tm_dots(col = "density", size = 0.01,
          breaks = color_breaks$brks, palette = viridis(10)) + 
    tm_layout(legend.show=FALSE, main.title = as.character(date), main.title.size = 0.5)
  return(map1)
})

# creating a gif with all the maps
tmap_animation(all_maps, filename = "animated_map.gif", 
               width = 1000, height = 1000, dpi = 300, delay = 50)
```

![Spatiotemporalgif](animated_map.gif)

The spatio-temporal map shows that Kanchanaphisek Road, Borommaratchachonnani Road and Industrial Ring Road are serious hotspots for road accidents.
