---
title: "Hands-on Exercise 03"
author: "Leow Xian Zu"
date: "1 September 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true 
  message: false #no more warning message
  freeze: true #whatever document already commited does not render
---

# Install and launch the packages

```{r}
pacman::p_load(sf, spNetwork, tmap, tidyverse)
```

# Import the data and prep it

```{r}
network <- st_read(dsn="C:/zzzzzuu/ISSS626GAA/Hands-on_Ex/Hands-on_Ex03/data/geospatial",
                   layer="Punggol_St") %>%
          st_transform(crs = 3414)
childcare <- st_read(dsn="C:/zzzzzuu/ISSS626GAA/Hands-on_Ex/Hands-on_Ex03/data/geospatial",
                     layer="Punggol_CC") %>%
             st_transform(crs = 3414) %>%
             st_zm()

st_crs(childcare)

#plot(network)

```

## Examine plot

```{r}
plot(st_geometry(network))
plot(childcare,add=T,col='red',pch = 19)
```

Cool!

Let's look at it in leaflet form

```{r}
tmap_mode('view')
tm_shape(childcare) +
  tm_dots() +
  tm_shape(network) +
  tm_lines()

tmap_mode("plot")
```

# Network KDE Analysis

## Lixelization

Before computing NKDE, the SpatialLines object need to be cut into lixels with a specified minimal distance. This task can be performed by using with [lixelize_lines()](https://jeremygelb.github.io/spNetwork/reference/lixelize_lines.html) of **spNetwork** as shown in the code chunk below.

Lixel lines are a concept used in spatial analysis, particularly in network-based analysis.

1.  Lixels: This term is a combination of "line" and "pixel". Just as a pixel is the smallest unit of a raster image, a lixel is the smallest unit of a line in a network.

2.  Purpose: Lixels are used to discretise continuous linear features (like roads or rivers) into smaller, equal-length segments. This discretization is often necessary for certain types of spatial analysis, especially when working with network data.

3.  NKDE (Network Kernel Density Estimation): This is a method used to estimate the density of events or phenomena along a network. Before applying NKDE, it's often necessary to break down the network into these smaller units (lixels) for more accurate analysis.

4.  Minimal distance: When creating lixels, you specify a minimal distance. This is the length of each lixel segment. The lines in your network will be cut into segments of this length.

5.  spNetwork package: This is the library that provides functions for spatial network analysis. The `lixelize_lines()` function is used to perform this lixelization process.

6.  SpatialLines object: This is a data structure used to represent linear features in a spatial context. The lixelization process is applied to this object.

The process of creating lixels allows for more precise analysis along a network, as it creates a consistent unit of measurement and analysis along potentially irregular network structures. This can be particularly useful in applications like traffic analysis, crime mapping along street networks, or analyzing the spread of phenomena along river systems. In this case, I will be looking at childcare centres.

```{r}
lixels <- lixelize_lines(network, 
                         700, 
                         mindist = 375)
```

## Line centre points

```{r}
samples <- lines_center(lixels) 

```

## Actual NKDE

```{r}
densities <- nkde(network, 
                  events = childcare,
                  w = rep(1, nrow(childcare)),
                  samples = samples,
                  kernel_name = "quartic",
                  bw = 300, 
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 5, 
                  sparse = TRUE,
                  verbose = FALSE)
```

Let's examine and visualise the NKDE

```{r}
samples$density <- densities
lixels$density <- densities
summary(samples$density)
summary(lixels$density)
```

That looks really small. Let's change it to events per KM.

```{r}
# rescaling to help the mapping
samples$density <- samples$density*1000
lixels$density <- lixels$density*1000
summary(samples$density)
summary(lixels$density)
```

Ok. Looks better. Let's visualise it.

```{r}
tmap_mode('view')
tm_shape(lixels)+
  tm_lines(col="density")+
tm_shape(childcare)+
  tm_dots()
tmap_mode('plot')
```

# Network constrained G and L function analysis

In this section, we are going to perform complete spatial randomness (CSR) test by using *kfunctions()* of **spNetwork** package. The null hypothesis is defined as:

**Ho: The observed spatial point events (i.e distribution of childcare centres) are uniformly distributed over a street network in Punggol Planning Area.**

The CSR test is based on the assumption of the binomial point process which implies the hypothesis that the childcare centres are randomly and independently distributed over the street network.

If this hypothesis is rejected, we may infer that the distribution of childcare centres are spatially interacting and dependent on each other; as a result, they may form nonrandom patterns.

```{r}
kfun_childcare <- kfunctions(network, 
                             childcare,
                             start = 0, 
                             end = 1000, 
                             step = 50, 
                             width = 50, 
                             nsim = 50, 
                             resolution = 50,
                             verbose = FALSE, 
                             conf_int = 0.05)
```

```{r}
kfun_childcare$plotk
```
