---
title: "Hands-on Exercise 02"
author: "Leow Xian Zu"
date: "31 Aug 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true 
  message: false #no more warning message
  freeze: true #whatever document already commited does not render
---

# Set up

## Load the packages

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse)
set.seed(1234)
```

## Import the data

```{r}
childcare_sf <- st_read("C:/zzzzzuu/ISSS626GAA/Hands-on_Ex/Hands-on_Ex02/data/child-care-services-geojson.geojson") %>%
  st_transform(crs = 3414)
sg_sf <- st_read(dsn = "C:/zzzzzuu/ISSS626GAA/Hands-on_Ex/Hands-on_Ex02/data", layer="CostalOutline")
mpsz_sf <- st_read(dsn = "C:/zzzzzuu/ISSS626GAA/Hands-on_Ex/Hands-on_Ex02/data", 
                layer = "MP14_SUBZONE_WEB_PL")
```

Note to self: the pipe function is a useful tool to avoid creating too many intermediate datasets.

```{r}
childcare_sf3414 <- st_transform(childcare_sf, 
                              crs = 3414)
```

## Mapping

Let's do some mapping!

```{r}
tmap_mode("plot")
tm_shape(mpsz_sf) +
  tm_polygons() +   
tm_shape(sg_sf) +
  tm_borders() +    
tm_shape(childcare_sf3414) +
  tm_dots()         

```

Alternatively, we can also prepare a pin map by using the code chunk below.

```{r}
tmap_mode('view')
tm_shape(childcare_sf)+
  tm_dots()

```

```{r}
tmap_mode('plot')
```

# Wrangling

Now let's try sp's Spatial\* class!

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)

```

Let's examine some the new classes.

```{r}
childcare
mpsz
sg
```

Cool! They are indeed in their new classes. Now, let's convert them into generic sp format to do analytical data.

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
childcare_sp
sg_sp
```

Cool! They are in their new forms now.

The main difference between these classes are that the Spatial\* classes are specialised objects designed for handling spatial data in a structured and consistent manner within the sp package framework. A generic "sp object" might refer to any spatial data-related object, but only Spatial\* classes offer the full suite of functionality needed for rigorous spatial data analysis in R.

Now, we will use *as.ppp()* function of **spatstat** to convert the spatial data into **spatstat**'s ***ppp*** object format and plot it.

```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
plot(childcare_ppp)
```

Eeks, that's messy. But that's ok. Let's look at the summary first.

```{r}
summary(childcare_ppp)
```

## Checking for duplicates

Let's check for duplicates because it is an issue of significance.

```{r}
any(duplicated(childcare_ppp))
```

Great! We can also check for co-indicence point.

```{r}
multiplicity(childcare_ppp)
sum(multiplicity(childcare_ppp) > 1)
```

There are no duplications.

```{r}
tmap_mode('view')
tm_shape(childcare) +
  tm_dots(alpha=0.4, 
          size=0.05)
```

Duplicated points would be those with complete overlap of dots.

Let's address this via jittering.

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

Now, let's check again for duplicates.

```{r}
any(duplicated(childcare_ppp_jit))
```

## owin object

```{r}
sg_owin <- as.owin(sg_sf)
plot(sg_owin)
summary(sg_owin)
```

This next step is important. It extracts the childcare events within Singapore using the simple line.

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
```

The output can be shown below.

```{r}
summary(childcareSG_ppp)
plot(childcare_ppp)
```

# First-order Spatial Point Patterns Analysis

## Kernel Density Estimation

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
plot(kde_childcareSG_bw)
bw <- bw.diggle(childcareSG_ppp)
bw
```

## Rescaling KDE values

```{r}
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, "km")
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```

## Different Automatic Bandwidth methods

```{r}
 bw.CvL(childcareSG_ppp.km)
 bw.scott(childcareSG_ppp.km)
 bw.ppl(childcareSG_ppp.km)
 bw.diggle(childcareSG_ppp.km)
```

```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

Compute 3 more KDEs using 3 different kernel functions. These are basically shapes of each point smoothing.

```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

# Fixed and adaptive KDE

## using Fixed first

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

## now adaptive

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

Interesting observation: Adaptive takes longer to compute! Understandably so.

```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

## Converting KDE output into grid object

```{r}
library(spatstat)
gridded_kde_childcareSG_bw <- as.im(kde_childcareSG.bw)
plot(gridded_kde_childcareSG_bw)


```

## Converting into raster

```{r}
library(raster)
kde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)
kde_childcareSG_bw_raster
```

crs is NA! It shouldn't be. Let's complete it.

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

## Time to map!

```{r}
library(tmap)
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("layer", palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

## Compare spatial point patterns using KDE

```{r}
library(dplyr)
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
par(mfrow=c(2,2))
plot(pg, main = "Ponggol")
```

```{r}
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")

```

## owin object

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

## Combining childcare points and study area

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
```

## Fixed Bandwidth

```{r}
par(mfrow=c(2,2))
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Chou Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="JUrong West")
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
```

## NN

nearest neighbour

```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

The Clark and Evans test is used to analyse spatial point patterns to determine if the points are randomly distributed, clustered, or regularly spaced. R = 0.55631: The value of R (the ratio of the observed mean nearest neighbour distance to the expected mean nearest neighbour distance under complete spatial randomness) is less than 1. When R, it suggests that the points are more clustered than would be expected under a random distribution.

The p-value is extremely small, indicating that the result is statistically significant. In other words, there is strong evidence against the null hypothesis of complete spatial randomness.

Alternative hypothesis: clustered (R \< 1): The test was conducted under the alternative hypothesis that the points are clustered. Given the significant p-value and R, the conclusion supports the alternative hypothesis that the points are indeed clustered.

Based on the Clark and Evans test, I can conclude that the spatial point pattern of \`childcareSG_ppp\` is significantly clustered, meaning that the points tend to occur closer together than would be expected if they were randomly distributed across the space.

Focus on CCK

```{r}
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

Now focus on tampines

```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

# **2nd Order Spatial Point Patterns Analysis Methods**

## **Analysing Spatial Point Process Using G-Function**

```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

The steeper rise of the observed G-function at shorter distances suggests that points are more likely to have close neighbors than would be expected under complete spatial randomness, indicating clustering in the childcare center locations. This analysis provides insights into the spatial distribution of childcare centers, suggesting a clustered pattern rather than a completely random distribution.

## Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with G-fucntion

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

Amazing! Just one line of code!

```{r}
plot(G_CK.csr)
```

Let's move on to Tampines.

```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

## Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Tampines are randomly distributed.

H1= The distribution of childcare services at Tampines are not randomly distributed.

The null hypothesis will be rejected is p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
plot(G_tm.csr)
```

Wow. Powerful stuff!

The observed G-function (black line) stays mostly within the grey envelope but deviates slightly towards the upper edge at certain distances. This suggests that while there may be some minor clustering in the pattern, the deviation is not strong enough to conclusively reject the hypothesis of CSR, at least not across the entire range of r. The fact that the observed G-function approaches the upper boundary of the envelope suggests a tendency towards clustering, but it does not seem pronounced enough to confirm significant clustering.

The CSR test via envelope analysis suggests that the observed point pattern is not significantly different from a random distribution (CSR) at the 95% confidence level, although there is a slight indication of clustering. This could mean that the pattern has some minor clustering tendencies but not strong enough to reject CSR.

## **Analysing Spatial Point Process Using F-Function**

```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

Monte Carlo test with F-fucntion

```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
plot(F_CK.csr)
```

Now for Tampines

```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
plot(F_tm.csr)
```

## **Analysing Spatial Point Process Using K-Function**

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of childcare services at Choa Chu Kang are randomly distributed.

H1= The distribution of childcare services at Choa Chu Kang are not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

The code chunk below is used to perform the hypothesis testing.

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

## **Analysing Spatial Point Process Using L-Function**

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```

That ends hands-on exercise 2.
